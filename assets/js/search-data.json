{"0": {
    "doc": "Authentication",
    "title": "Authentication",
    "content": "The backend ships with a Google OAuth 2.0 flow that enriches MCP tool responses with user context. Use this guide to configure local and production environments. ",
    "url": "/common-configurations/authentication.html",
    
    "relUrl": "/common-configurations/authentication.html"
  },"1": {
    "doc": "Authentication",
    "title": "Create Google OAuth Credentials",
    "content": ". | Visit the Google Cloud Console. | Create or select a project. | Enable the People API. | Navigate to Credentials → Create Credentials → OAuth 2.0 Client ID. | Choose Web application and add the redirect URI http://localhost:8082/oauth/callback. | Save the Client ID and Client Secret. | . ",
    "url": "/common-configurations/authentication.html#create-google-oauth-credentials",
    
    "relUrl": "/common-configurations/authentication.html#create-google-oauth-credentials"
  },"2": {
    "doc": "Authentication",
    "title": "Configure the Server",
    "content": "cp .env.oauth.example .env.oauth . Update the new file with your client credentials: . GOOGLE_CLIENT_ID=your_google_client_id.googleusercontent.com GOOGLE_CLIENT_SECRET=your_google_client_secret . ",
    "url": "/common-configurations/authentication.html#configure-the-server",
    
    "relUrl": "/common-configurations/authentication.html#configure-the-server"
  },"3": {
    "doc": "Authentication",
    "title": "Launch the OAuth-Enabled Server",
    "content": "pnpm demo:oauth . Expected console output includes the base server URL, MCP endpoint, and all discovery routes. ",
    "url": "/common-configurations/authentication.html#launch-the-oauth-enabled-server",
    
    "relUrl": "/common-configurations/authentication.html#launch-the-oauth-enabled-server"
  },"4": {
    "doc": "Authentication",
    "title": "Enable HTTPS with ngrok",
    "content": "Google only accepts HTTPS origins for production callbacks. Use ngrok to expose your local server securely when testing outside localhost. brew install ngrok # macOS choco install ngrok # Windows (Chocolatey) snap install ngrok # Linux (Snap) . Authenticate ngrok (first run) and forward the development port: . ngrok config add-authtoken &lt;your-ngrok-token&gt; ngrok http 8082 . Copy the https://&lt;random&gt;.ngrok.app host from the output. Add these entries to your Google OAuth client configuration: . | Authorized redirect URI: https://&lt;random&gt;.ngrok.app/oauth/callback | Authorized JavaScript origin: https://&lt;random&gt;.ngrok.app | . Restart pnpm demo:oauth so the server advertises the public callback in the logs. Clients can now complete the OAuth flow end-to-end over HTTPS. ",
    "url": "/common-configurations/authentication.html#enable-https-with-ngrok",
    
    "relUrl": "/common-configurations/authentication.html#enable-https-with-ngrok"
  },"5": {
    "doc": "Authentication",
    "title": "Test with MCP Jam",
    "content": ". | Open MCP Jam at http://localhost:4000. | Connect to the MCP server URL displayed in your console. | Complete the Google login flow when prompted. | Confirm tool responses include the authenticated user metadata. | . ",
    "url": "/common-configurations/authentication.html#test-with-mcp-jam",
    
    "relUrl": "/common-configurations/authentication.html#test-with-mcp-jam"
  },"6": {
    "doc": "Authentication",
    "title": "Discovery Endpoints",
    "content": "The server exposes standard OAuth2 and OIDC discovery routes: . | /.well-known/oauth-authorization-server | /.well-known/oauth-protected-resource | /.well-known/openid-configuration | /register | /.well-known/jwks.json | . OIDC-style paths under /oidc/.well-known/* are automatically redirected. ",
    "url": "/common-configurations/authentication.html#discovery-endpoints",
    
    "relUrl": "/common-configurations/authentication.html#discovery-endpoints"
  },"7": {
    "doc": "Authentication",
    "title": "Troubleshooting",
    "content": "| Symptom | Resolution | . | MCP Jam reports “OAuth failed” | Verify redirect URI, credentials in .env.oauth, and server port 8082. | . | Requests under /oidc/... fail | The server already forwards these paths; confirm you are running the latest build. | . ",
    "url": "/common-configurations/authentication.html#troubleshooting",
    
    "relUrl": "/common-configurations/authentication.html#troubleshooting"
  },"8": {
    "doc": "Authentication",
    "title": "Production Considerations",
    "content": ". | Always serve OAuth flows over HTTPS. | Store tokens in durable storage (Redis or a database) instead of process memory. | Implement refresh token handling for long-lived sessions. | Validate JWT signatures if migrating to signed tokens. | . ",
    "url": "/common-configurations/authentication.html#production-considerations",
    
    "relUrl": "/common-configurations/authentication.html#production-considerations"
  },"9": {
    "doc": "CORS",
    "title": "CORS Configuration Guide",
    "content": "Complete guide for configuring Cross-Origin Resource Sharing (CORS) in the Simple RPC AI Backend. ",
    "url": "/common-configurations/cors.html#cors-configuration-guide",
    
    "relUrl": "/common-configurations/cors.html#cors-configuration-guide"
  },"10": {
    "doc": "CORS",
    "title": "Table of Contents",
    "content": ". | What is CORS? | Configuration Options | Understanding credentials: true | Common Scenarios | Security Considerations | Troubleshooting | . ",
    "url": "/common-configurations/cors.html#table-of-contents",
    
    "relUrl": "/common-configurations/cors.html#table-of-contents"
  },"11": {
    "doc": "CORS",
    "title": "What is CORS?",
    "content": "Cross-Origin Resource Sharing (CORS) is a security feature implemented by web browsers that controls which websites can access resources from your server. The Same-Origin Policy Problem . By default, browsers prevent JavaScript running on https://example.com from making requests to https://api.different-domain.com. This is called the Same-Origin Policy. CORS allows you to selectively relax this restriction by telling browsers which origins (domains) are allowed to access your API. Why You Need CORS Configuration . You need CORS when: . | Your frontend runs on a different domain than your API (e.g., http://localhost:3000 → http://localhost:8000) | You want to use web-based tools like MCP Jam, OpenRPC Playground, or tRPC Playground | You’re building a browser-based client application | You need to send cookies or authentication headers cross-origin | . ",
    "url": "/common-configurations/cors.html#what-is-cors",
    
    "relUrl": "/common-configurations/cors.html#what-is-cors"
  },"12": {
    "doc": "CORS",
    "title": "Configuration Options",
    "content": "Basic Configuration . Location: src/rpc-ai-server.ts:130-134 . interface RpcAiServerConfig { cors?: { origin?: string | string[]; // Which domains can access your API credentials?: boolean; // Allow cookies/auth headers }; } . Default Configuration . Default behavior (if you don’t specify CORS): . cors: { origin: '*', // Allow all origins (permissive) credentials: false // No cookies/auth headers (safe default) } . | Implementation: [src/rpc-ai-server.ts:461-465]({ { “/../src/rpc-ai-server.ts#L461-L465/index.md” | relative_url } }) | . CORS Middleware Setup . The server uses the cors npm package with these settings: . app.use(cors({ origin: config.cors.origin, // Your configured origins credentials: config.cors.credentials, methods: ['GET', 'POST', 'OPTIONS', 'HEAD'], allowedHeaders: [ 'Content-Type', 'Authorization', 'X-Requested-With', 'mcp-protocol-version', 'Accept', 'Accept-Language', 'Content-Language', 'Origin' ], optionsSuccessStatus: 200 // Legacy browser support })); . | Implementation: [src/rpc-ai-server.ts:692-707]({ { “/../src/rpc-ai-server.ts#L692-L707/index.md” | relative_url } }) | . ",
    "url": "/common-configurations/cors.html#configuration-options",
    
    "relUrl": "/common-configurations/cors.html#configuration-options"
  },"13": {
    "doc": "CORS",
    "title": "Understanding credentials: true",
    "content": "What Does It Do? . credentials: true tells the browser to include sensitive data in cross-origin requests: . | Cookies: Session cookies, authentication cookies | Authorization headers: Bearer tokens, API keys | Client certificates: TLS client certificates | . When credentials: false (Default) . GET /api/endpoint HTTP/1.1 Host: api.example.com Origin: https://frontend.example.com # ❌ No cookies sent # ❌ No Authorization header . Response: . HTTP/1.1 200 OK Access-Control-Allow-Origin: * # ✅ Works with wildcard origin . When credentials: true . GET /api/endpoint HTTP/1.1 Host: api.example.com Origin: https://frontend.example.com Cookie: session=abc123 Authorization: Bearer token123 # ✅ Cookies and auth headers included . Response: . HTTP/1.1 200 OK Access-Control-Allow-Origin: https://frontend.example.com Access-Control-Allow-Credentials: true # ⚠️ Cannot use wildcard (*) with credentials . Important Security Rules . When using credentials: true: . | Cannot use wildcard origin: origin: '*' is forbidden | Must specify exact origins: Use array or specific domain | Browsers enforce this: Server will work, but browser will block the response | . ",
    "url": "/common-configurations/cors.html#understanding-credentials-true",
    
    "relUrl": "/common-configurations/cors.html#understanding-credentials-true"
  },"14": {
    "doc": "CORS",
    "title": "Common Scenarios",
    "content": "Scenario 1: Development (Allow All Origins, No Credentials) . Use Case: Quick development, public APIs, no authentication . const server = createRpcAiServer({ cors: { origin: '*', // Allow any origin credentials: false // No cookies/auth } }); . Pros: . | ✅ Works with any frontend | ✅ Easy to test with curl, Postman, etc. | ✅ No browser CORS errors | . Cons: . | ❌ Cannot send cookies or auth headers | ❌ Not suitable for authenticated APIs | ⚠️ Less secure (anyone can call your API) | . Scenario 2: Local Development (Multiple Ports, With Authentication) . Use Case: Frontend on port 3000, API on port 8000, using OAuth/sessions . const server = createRpcAiServer({ cors: { origin: [ 'http://localhost:3000', // React/Next.js frontend 'http://localhost:8080', // Dev panel 'http://localhost:4000', // MCP Jam Inspector 'https://playground.open-rpc.org', // OpenRPC Playground 'https://inspector.open-rpc.org' // OpenRPC Inspector ], credentials: true // ⭐ Allow cookies and auth headers } }); . Pros: . | ✅ Works with OAuth sessions | ✅ Supports cookie-based authentication | ✅ Allows Authorization headers | ✅ Works with web-based tools | . Cons: . | ⚠️ Must list all allowed origins explicitly | ⚠️ Cannot use wildcard * | . | Example: [examples/02-mcp-server/server.js:370-379]({ { “/../examples/02-mcp-server/server.js#L370-L379/index.md” | relative_url } }) | . Scenario 3: Production (Single Origin, Secure) . Use Case: Production app with single frontend domain . const server = createRpcAiServer({ cors: { origin: 'https://app.example.com', // Your production frontend credentials: true // Allow authenticated requests } }); . Pros: . | ✅ Most secure (single origin) | ✅ Supports authentication | ✅ Clear security boundary | . Cons: . | ❌ Only one origin allowed | ❌ Must update for additional frontends | . Scenario 4: Multi-Tenant Production (Multiple Domains) . Use Case: SaaS app with multiple customer domains . const server = createRpcAiServer({ cors: { origin: [ 'https://app.example.com', 'https://client1.example.com', 'https://client2.example.com' ], credentials: true } }); . Or use environment variable: . const server = createRpcAiServer({ cors: { // Comma-separated list: \"https://a.com,https://b.com\" origin: process.env.CORS_ORIGIN, credentials: true } }); . Environment Variable Format: . # .env CORS_ORIGIN=https://app.example.com,https://client1.example.com,https://client2.example.com . | Automatic Parsing: [src/rpc-ai-server.ts:360-370]({ { “/../src/rpc-ai-server.ts#L360-L370/index.md” | relative_url } }) | . The server automatically splits comma-separated origins into an array. Scenario 5: Dynamic Origin Validation (Advanced) . Use Case: Validate origins against a database or regex pattern . import { createRpcAiServer } from 'simple-rpc-ai-backend'; // Custom origin validation function function validateOrigin(origin: string | undefined, callback: (err: Error | null, allow?: boolean) =&gt; void) { if (!origin) { // Allow requests with no origin (e.g., curl, Postman) callback(null, true); return; } // Allow localhost in development if (process.env.NODE_ENV === 'development' &amp;&amp; origin.includes('localhost')) { callback(null, true); return; } // Check against database or regex if (origin.match(/^https:\\/\\/.*\\.example\\.com$/)) { callback(null, true); } else { callback(new Error('Not allowed by CORS')); } } // Note: This requires modifying the server to accept a function // Current implementation only supports string | string[] . Note: Current implementation supports string | string[] only. For dynamic validation, you would need to extend the server configuration. ",
    "url": "/common-configurations/cors.html#common-scenarios",
    
    "relUrl": "/common-configurations/cors.html#common-scenarios"
  },"15": {
    "doc": "CORS",
    "title": "Security Considerations",
    "content": "Best Practices . | Never use credentials: true with origin: '*' . | ❌ Browsers will block this | ⚠️ Huge security risk if it worked | . | Use specific origins in production // ❌ Bad (production) cors: { origin: '*', credentials: true } // ✅ Good (production) cors: { origin: 'https://app.example.com', credentials: true } . | Separate development and production configs const isDev = process.env.NODE_ENV === 'development'; const server = createRpcAiServer({ cors: { origin: isDev ? '*' // Permissive in dev : process.env.ALLOWED_ORIGINS?.split(','), // Strict in prod credentials: !isDev // Only in production } }); . | Use HTTPS in production . | Mixed content (HTTP origin + HTTPS API) is blocked by browsers | Always use https:// origins in production | . | Minimize exposed origins . | Only list origins that actually need access | Regularly audit and remove unused origins | Use environment variables for flexibility | . | . Common Security Mistakes . ❌ Mistake 1: Wildcard with credentials . cors: { origin: '*', credentials: true // ❌ Will fail in browser } . ❌ Mistake 2: Hardcoded production origins in code . cors: { origin: 'https://my-app.com', // ❌ Can't change without redeployment credentials: true } . ✅ Better: Use environment variables . cors: { origin: process.env.CORS_ORIGIN || 'http://localhost:3000', credentials: true } . ❌ Mistake 3: Including HTTP origins in production . cors: { origin: [ 'https://app.example.com', 'http://app.example.com' // ❌ Insecure HTTP ], credentials: true } . ",
    "url": "/common-configurations/cors.html#security-considerations",
    
    "relUrl": "/common-configurations/cors.html#security-considerations"
  },"16": {
    "doc": "CORS",
    "title": "Troubleshooting",
    "content": "Problem 1: “No ‘Access-Control-Allow-Origin’ header is present” . Symptoms: . Access to fetch at 'http://localhost:8000/rpc' from origin 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present. Solution: . // Add the origin to your CORS config cors: { origin: ['http://localhost:3000'], // ⭐ Add your frontend URL credentials: false } . Problem 2: “Credentials flag is true, but origin is ‘*’” . Symptoms: . The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Solution: . // Option 1: Specify exact origins cors: { origin: ['http://localhost:3000'], // ⭐ Specific origins credentials: true } // Option 2: Disable credentials cors: { origin: '*', credentials: false // ⭐ Turn off credentials } . Problem 3: “Credentials are not included in CORS request” . Symptoms: . | Cookies not sent with requests | Authorization header missing | Server receives unauthenticated requests | . Frontend Code (Fetch API): . // ❌ Wrong: No credentials fetch('http://localhost:8000/rpc', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ /* ... */ }) }); // ✅ Correct: Include credentials fetch('http://localhost:8000/rpc', { method: 'POST', credentials: 'include', // ⭐ Include cookies/auth headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ /* ... */ }) }); . Frontend Code (Axios): . // ❌ Wrong: No credentials axios.post('http://localhost:8000/rpc', data); // ✅ Correct: Include credentials axios.post('http://localhost:8000/rpc', data, { withCredentials: true // ⭐ Include cookies/auth }); . Server Config: . cors: { origin: ['http://localhost:3000'], credentials: true // ⭐ Must be enabled } . Problem 4: “Preflight request failed” . Symptoms: . Access to fetch at 'http://localhost:8000/rpc' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: It does not have HTTP ok status. Explanation: Browsers send a preflight OPTIONS request before POST/PUT/DELETE requests. The server must respond with 200 OK. Solution: The server automatically handles OPTIONS requests. Check: . | Server is running | No middleware blocking OPTIONS requests | No errors in server logs | . Problem 5: “Origin not in allowed list” . Symptoms: . Access to fetch at 'http://localhost:8000/rpc' from origin 'http://localhost:5173' has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header has a value 'http://localhost:3000' that is not equal to the supplied origin. Solution: . // Add all development ports cors: { origin: [ 'http://localhost:3000', // Create React App 'http://localhost:5173', // ⭐ Vite dev server 'http://localhost:8080', // Other tools ], credentials: true } . ",
    "url": "/common-configurations/cors.html#troubleshooting",
    
    "relUrl": "/common-configurations/cors.html#troubleshooting"
  },"17": {
    "doc": "CORS",
    "title": "Testing CORS Configuration",
    "content": "Test 1: Verify CORS Headers . Using curl: . curl -H \"Origin: http://localhost:3000\" \\ -H \"Access-Control-Request-Method: POST\" \\ -H \"Access-Control-Request-Headers: Content-Type\" \\ -X OPTIONS \\ http://localhost:8000/rpc \\ -v . Expected response: . HTTP/1.1 200 OK Access-Control-Allow-Origin: http://localhost:3000 Access-Control-Allow-Methods: GET, POST, OPTIONS, HEAD Access-Control-Allow-Headers: Content-Type, Authorization, ... Access-Control-Allow-Credentials: true . Test 2: Browser Console Test . Open browser console on http://localhost:3000: . // Test without credentials fetch('http://localhost:8000/health') .then(r =&gt; r.json()) .then(console.log) .catch(console.error); // Test with credentials fetch('http://localhost:8000/health', { credentials: 'include' }) .then(r =&gt; r.json()) .then(console.log) .catch(console.error); . Test 3: Check Server Logs . Enable debug logging to see CORS requests: . LOG_LEVEL=debug pnpm dev . Look for CORS-related log entries. ",
    "url": "/common-configurations/cors.html#testing-cors-configuration",
    
    "relUrl": "/common-configurations/cors.html#testing-cors-configuration"
  },"18": {
    "doc": "CORS",
    "title": "Advanced: OAuth Discovery Endpoints",
    "content": "The server has special CORS handling for OAuth discovery endpoints to ensure compatibility with MCP clients: . | Implementation: [src/rpc-ai-server.ts:910-915]({ { “/../src/rpc-ai-server.ts#L910-L915/index.md” | relative_url } }) | . // OAuth discovery endpoints always allow all origins app.options('/.well-known/oauth-authorization-server', (req, res) =&gt; { res.header('Access-Control-Allow-Origin', '*'); res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS'); res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, ...'); res.status(200).send(); }); . These endpoints use Access-Control-Allow-Origin: * regardless of your CORS configuration to ensure OAuth discovery works from any MCP client. ",
    "url": "/common-configurations/cors.html#advanced-oauth-discovery-endpoints",
    
    "relUrl": "/common-configurations/cors.html#advanced-oauth-discovery-endpoints"
  },"19": {
    "doc": "CORS",
    "title": "Reference",
    "content": "Configuration Files . | Server config interface: src/rpc-ai-server.ts#L130-L134 | Default CORS config: src/rpc-ai-server.ts#L461-L465 | CORS middleware setup: src/rpc-ai-server.ts#L692-L707 | Origin parsing function: src/rpc-ai-server.ts#L360-L370 | . Example Configurations . | MCP server example: [examples/02-mcp-server/server.js:370-379]({ { “/../examples/02-mcp-server/server.js#L370-L379/index.md” | relative_url } }) | . | | Basic server example: [examples/01-basic-server/server.js:68]({ { “/../examples/01-basic-server/server.js#L68/index.md” | relative_url } }) | . | . Related Documentation . | OAuth Setup - OAuth authentication configuration | MCP OAuth Authentication - MCP-specific auth | Security Best Practices - Security architecture | . ",
    "url": "/common-configurations/cors.html#reference",
    
    "relUrl": "/common-configurations/cors.html#reference"
  },"20": {
    "doc": "CORS",
    "title": "Quick Reference",
    "content": "| Scenario | origin | credentials | Use Case | . | Public API | '*' | false | No authentication, open access | . | Local Dev (no auth) | '*' | false | Quick testing, no cookies needed | . | Local Dev (with auth) | ['http://localhost:3000', ...] | true | OAuth, session cookies | . | Production (single) | 'https://app.example.com' | true | Single frontend domain | . | Production (multi) | ['https://a.com', 'https://b.com'] | true | Multiple frontend domains | . | SaaS (dynamic) | process.env.CORS_ORIGIN | true | Environment-based config | . ",
    "url": "/common-configurations/cors.html#quick-reference",
    
    "relUrl": "/common-configurations/cors.html#quick-reference"
  },"21": {
    "doc": "CORS",
    "title": "Summary",
    "content": ". | origin: Controls which domains can access your API . | '*' = Allow all (only use in development or public APIs) | 'https://example.com' = Allow specific domain | ['https://a.com', 'https://b.com'] = Allow multiple domains | . | credentials: Controls whether cookies and auth headers are included . | false = No cookies/auth headers (default, safer) | true = Include cookies/auth headers (required for OAuth, sessions) | . | Security Rule: When credentials: true, you cannot use origin: '*' . | Best Practice: . | Development: origin: '*', credentials: false | Production: origin: ['specific-domains'], credentials: true | . | . ",
    "url": "/common-configurations/cors.html#summary",
    
    "relUrl": "/common-configurations/cors.html#summary"
  },"22": {
    "doc": "CORS",
    "title": "CORS",
    "content": " ",
    "url": "/common-configurations/cors.html",
    
    "relUrl": "/common-configurations/cors.html"
  },"23": {
    "doc": "Environment Configuration",
    "title": "Environment Configuration",
    "content": "Centralize key environment variables that control provider access, registry behavior, and runtime features. ",
    "url": "/common-configurations/environment.html",
    
    "relUrl": "/common-configurations/environment.html"
  },"24": {
    "doc": "Environment Configuration",
    "title": "Core Variables",
    "content": "| Variable | Purpose | . | SERVER_PORT | HTTP port for the RPC server (default 8080). | . | NODE_ENV | Controls production vs development logging and caching. | . | SERVER_WORKSPACE_DIR | Default server-managed workspace path. | . ",
    "url": "/common-configurations/environment.html#core-variables",
    
    "relUrl": "/common-configurations/environment.html#core-variables"
  },"25": {
    "doc": "Environment Configuration",
    "title": "Provider Selection",
    "content": "Configure which AI providers are active at runtime. export AI_SERVICE_PROVIDERS=anthropic,openai,google export AI_BYOK_PROVIDERS=anthropic,openai,google,custom-ai export AI_FREE_TIER_PROVIDERS=free . These values feed the ProviderRegistryService, shaping both service-managed and user-managed provider lists. Service providers correspond to server-managed credentials that the platform funds, while BYOK (bring your own key) providers expect end users to supply their own API keys at runtime. Maintaining both lists lets you present distinct pricing tiers without code changes. ",
    "url": "/common-configurations/environment.html#provider-selection",
    
    "relUrl": "/common-configurations/environment.html#provider-selection"
  },"26": {
    "doc": "Environment Configuration",
    "title": "Registry Management",
    "content": "At install time the backend pulls the latest model catalogue from @anolilab/ai-model-registry. Runtime reads always go through that library, so there is no manual cache path or refresh interval to configure. To override pricing or models: . import { ProviderRegistryService } from 'simple-rpc-ai-backend'; const registry = new ProviderRegistryService( ['anthropic', 'openai'], // service-managed providers ['anthropic', 'openai'], // BYOK providers [] ); registry.addPricingOverride({ provider: 'openai', model: 'gpt-4o', pricing: { input: 2.5, output: 10 }, reason: 'Enterprise contract' }); registry.addModelOverride({ provider: 'anthropic', id: 'claude-3-7-sonnet-20250219', name: 'Claude 3.7 Sonnet', capabilities: ['text', 'json'], contextWindow: 200000 }); . Place overrides in your server bootstrap (before createRpcAiServer) so the dev panel and MCP surface the updated metadata. ",
    "url": "/common-configurations/environment.html#registry-management",
    
    "relUrl": "/common-configurations/environment.html#registry-management"
  },"27": {
    "doc": "Environment Configuration",
    "title": "Workspace Controls",
    "content": "export SERVER_WORKSPACES_ENABLE_API=true export SERVER_WORKSPACES_CONFIG=./config/server-workspaces.json . The JSON configuration allows fine-grained read/write settings, path restrictions, and file size limits for each workspace entry. ",
    "url": "/common-configurations/environment.html#workspace-controls",
    
    "relUrl": "/common-configurations/environment.html#workspace-controls"
  },"28": {
    "doc": "Environment Configuration",
    "title": "Authentication Values",
    "content": "Set provider secrets and OAuth credentials in .env files that are never committed. export ANTHROPIC_API_KEY=... export OPENAI_API_KEY=... export GOOGLE_API_KEY=... # OAuth example export GOOGLE_CLIENT_ID=... export GOOGLE_CLIENT_SECRET=... Rotate keys regularly and load them through your container orchestration platform when deploying. ",
    "url": "/common-configurations/environment.html#authentication-values",
    
    "relUrl": "/common-configurations/environment.html#authentication-values"
  },"29": {
    "doc": "Extension OAuth",
    "title": "Extension OAuth - Generic OAuth Callback Handler",
    "content": "Simplified OAuth callback handling for any custom OAuth flow (extensions, sessions, multi-tenant, etc.). ",
    "url": "/common-configurations/extension-oauth.html#extension-oauth---generic-oauth-callback-handler",
    
    "relUrl": "/common-configurations/extension-oauth.html#extension-oauth---generic-oauth-callback-handler"
  },"30": {
    "doc": "Extension OAuth",
    "title": "Overview",
    "content": "A flexible OAuth callback handler that: . | Detects custom OAuth flows via a state parameter marker | Handles token exchange automatically (Google, GitHub, or custom providers) | Sends postMessage to the opener window with results | Provides full state access in callbacks | . Key Feature: You control what data flows through OAuth via the state parameter. ",
    "url": "/common-configurations/extension-oauth.html#overview",
    
    "relUrl": "/common-configurations/extension-oauth.html#overview"
  },"31": {
    "doc": "Extension OAuth",
    "title": "Quick Start",
    "content": "Server (10 lines) . import { createRpcAiServer } from 'simple-rpc-ai-backend'; const server = createRpcAiServer({ oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET }, extensionOAuth: { enabled: true, onUserAuthenticated: async (stateData, userId, userInfo) =&gt; { console.log('State:', stateData); console.log('User:', userInfo.email); await yourCustomLogic(stateData, userId, userInfo); } } }); . Client (5 lines) . import { encodeOAuthState } from 'simple-rpc-ai-backend'; const state = encodeOAuthState({ isExtensionAuth: true, // Required marker sessionId: 'abc-123', returnPath: '/dashboard' }); const popup = window.open(`/login/google?state=${state}`); window.addEventListener('message', (event) =&gt; { if (event.data.type === 'oauth-complete' &amp;&amp; event.data.success) { console.log('User:', event.data.user); console.log('Your state:', event.data.state); } }); . That’s it! No boilerplate, no provider-specific code. ",
    "url": "/common-configurations/extension-oauth.html#quick-start",
    
    "relUrl": "/common-configurations/extension-oauth.html#quick-start"
  },"32": {
    "doc": "Extension OAuth",
    "title": "Use Cases",
    "content": "Extension UUID Linking . const state = encodeOAuthState({ isExtensionAuth: true, extensionUUID: crypto.randomUUID() }); onUserAuthenticated: (stateData, userId) =&gt; { await linkExtension(stateData.extensionUUID, userId); }; . Session-Based Auth . const state = encodeOAuthState({ isExtensionAuth: true, sessionId: getSessionId(), deviceId: getDeviceId() }); onUserAuthenticated: (stateData, userId) =&gt; { await linkSession(stateData.sessionId, userId); await registerDevice(stateData.deviceId, userId); }; . Multi-Tenant . const state = encodeOAuthState({ isExtensionAuth: true, tenantId: getTenantId(), workspaceId: getWorkspaceId(), inviteCode: getInviteCode() }); onUserAuthenticated: (stateData, userId) =&gt; { await addToTenant(userId, stateData.tenantId); await grantWorkspaceAccess(userId, stateData.workspaceId); await acceptInvite(stateData.inviteCode, userId); }; . ",
    "url": "/common-configurations/extension-oauth.html#use-cases",
    
    "relUrl": "/common-configurations/extension-oauth.html#use-cases"
  },"33": {
    "doc": "Extension OAuth",
    "title": "Data Flow",
    "content": "Client → Server (via state parameter) . Send custom data to the server by encoding it in the state parameter: . const state = encodeOAuthState({ isExtensionAuth: true, extensionUUID: 'abc-123', sessionId: 'xyz-456', anything: 'you want' }); . Server → Client (via postMessage) . The handler posts a message back to the opener window when OAuth completes: . window.addEventListener('message', (event) =&gt; { if (event.data?.type === 'oauth-complete') { if (event.data.success) { console.log(event.data.user); console.log(event.data.state); } else { console.error(event.data.error); } } }); . ",
    "url": "/common-configurations/extension-oauth.html#data-flow",
    
    "relUrl": "/common-configurations/extension-oauth.html#data-flow"
  },"34": {
    "doc": "Extension OAuth",
    "title": "Customizing the Handler",
    "content": "const server = createRpcAiServer({ extensionOAuth: { enabled: true, isExtensionOAuth: (state) =&gt; state?.flow === 'extension', onUserAuthenticated: async (state, userId, user) =&gt; { await linkExtension(state.extensionId, userId); }, successTemplate: (user, state) =&gt; ` &lt;html&gt;&lt;body&gt; &lt;script&gt; window.opener?.postMessage({ type: 'oauth-complete', success: true, user: ${JSON.stringify(user)}, state: ${JSON.stringify(state)} }, '*'); setTimeout(() =&gt; window.close(), 500); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; ` } }); . ",
    "url": "/common-configurations/extension-oauth.html#customizing-the-handler",
    
    "relUrl": "/common-configurations/extension-oauth.html#customizing-the-handler"
  },"35": {
    "doc": "Extension OAuth",
    "title": "API Reference",
    "content": "encodeOAuthState(data: any): string . Encodes custom data into a Base64 state parameter. decodeOAuthState(state: string): any | null . Decodes the state parameter back to an object. createExtensionOAuthHandler(config) . Creates Express middleware for OAuth callback handling. { enabled?: boolean; isExtensionOAuth?: (state: any) =&gt; boolean; onUserAuthenticated?: (state: any, userId: string, user: object) =&gt; void | Promise&lt;void&gt;; tokenExchangeHandlers?: Record&lt;string, (code: string, callbackUrl: string) =&gt; Promise&lt;UserInfo&gt;&gt;; successTemplate?: (user: object, state: any) =&gt; string; errorTemplate?: (error: string, state?: any) =&gt; string; } . ",
    "url": "/common-configurations/extension-oauth.html#api-reference",
    
    "relUrl": "/common-configurations/extension-oauth.html#api-reference"
  },"36": {
    "doc": "Extension OAuth",
    "title": "Environment Variables",
    "content": "GOOGLE_CLIENT_ID=your-google-client-id GOOGLE_CLIENT_SECRET=your-google-client-secret GITHUB_CLIENT_ID=your-github-client-id GITHUB_CLIENT_SECRET=your-github-client-secret OAUTH_BASE_URL=https://your-server.com . ",
    "url": "/common-configurations/extension-oauth.html#environment-variables",
    
    "relUrl": "/common-configurations/extension-oauth.html#environment-variables"
  },"37": {
    "doc": "Extension OAuth",
    "title": "Security Checklist",
    "content": ". | ✅ Email redaction in logs | ✅ State validation | ✅ HTTPS required for production | ✅ No token storage (exchanged &amp; discarded) | ✅ Customizable detection logic | . ",
    "url": "/common-configurations/extension-oauth.html#security-checklist",
    
    "relUrl": "/common-configurations/extension-oauth.html#security-checklist"
  },"38": {
    "doc": "Extension OAuth",
    "title": "Troubleshooting",
    "content": "| Symptom | Resolution | . | oauth-complete not firing | Ensure state includes isExtensionAuth: true (or customize isExtensionOAuth). | . | Popup closes before message | Increase the timeout in the success template. | . | Custom provider not exchanging tokens | Add a handler under tokenExchangeHandlers. | . ",
    "url": "/common-configurations/extension-oauth.html#troubleshooting",
    
    "relUrl": "/common-configurations/extension-oauth.html#troubleshooting"
  },"39": {
    "doc": "Extension OAuth",
    "title": "Related",
    "content": ". | Authentication | MCP OAuth | . ",
    "url": "/common-configurations/extension-oauth.html#related",
    
    "relUrl": "/common-configurations/extension-oauth.html#related"
  },"40": {
    "doc": "Extension OAuth",
    "title": "Extension OAuth",
    "content": " ",
    "url": "/common-configurations/extension-oauth.html",
    
    "relUrl": "/common-configurations/extension-oauth.html"
  },"41": {
    "doc": "Tips & Tricks",
    "title": "Tips &amp; Tricks",
    "content": "Practical patterns and testing utilities that make it easier to ship with the Simple RPC AI Backend. ",
    "url": "/tips-and-tricks/#tips--tricks",
    
    "relUrl": "/tips-and-tricks/#tips--tricks"
  },"42": {
    "doc": "Tips & Tricks",
    "title": "Tips & Tricks",
    "content": " ",
    "url": "/tips-and-tricks/",
    
    "relUrl": "/tips-and-tricks/"
  },"43": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "Kick off your Simple RPC AI Backend journey with the guides below. They cover the overall concepts, detailed installation steps, and a streamlined quickstart flow so you can deploy the server in minutes. ",
    "url": "/getting-started/",
    
    "relUrl": "/getting-started/"
  },"44": {
    "doc": "Server API",
    "title": "Server API",
    "content": "Dive into the transport and resource layers that power the Simple RPC AI Backend. These guides document endpoints, schemas, and workflows for tools and registry integrations. ",
    "url": "/server-api/",
    
    "relUrl": "/server-api/"
  },"45": {
    "doc": "Common Configurations",
    "title": "Common Configurations",
    "content": "Configure the backend for your environment by fine-tuning provider credentials, authentication callbacks, and workspace defaults. The sections below outline the most frequently adjusted settings. ",
    "url": "/common-configurations/",
    
    "relUrl": "/common-configurations/"
  },"46": {
    "doc": "Common Issues",
    "title": "Common Issues",
    "content": "Resolve frequent stumbling blocks with targeted troubleshooting steps and diagnostic tips tailored to local development and production deployments. ",
    "url": "/common-issues/",
    
    "relUrl": "/common-issues/"
  },"47": {
    "doc": "Documentation",
    "title": "Simple RPC AI Backend Documentation",
    "content": "Welcome to the official documentation for the Simple RPC AI Backend. This site consolidates setup guidance, common configuration patterns, and API references for building and hosting Model Context Protocol (MCP) compatible services. ",
    "url": "/#simple-rpc-ai-backend-documentation",
    
    "relUrl": "/#simple-rpc-ai-backend-documentation"
  },"48": {
    "doc": "Documentation",
    "title": "Documentation Structure",
    "content": ". | Getting Started – project introduction, installation, and first-run guidance. | Common Configurations – environment variables, authentication, and workspace management. | Server API – transport layers, tools, and registry integrations. | Common Issues – troubleshooting steps for local and production deployments. | Tips &amp; Tricks – handy TypeScript patterns and testing utilities. | . Need a quick overview? Start with the Quickstart to launch a development instance in minutes. ",
    "url": "/#documentation-structure",
    
    "relUrl": "/#documentation-structure"
  },"49": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"50": {
    "doc": "Installation",
    "title": "Installation",
    "content": "⚠️ This guide is for contributors and package developers. If you only consume the npm package, head to the Quickstart instead. Follow these steps to install and verify the Simple RPC AI Backend locally from the repository. ",
    "url": "/getting-started/installation.html",
    
    "relUrl": "/getting-started/installation.html"
  },"51": {
    "doc": "Installation",
    "title": "Prerequisites",
    "content": ". | Node.js 22.0.0 or newer (tRPC compatibility) | pnpm 7.0.0 or newer (Corepack recommended) | Python 3.8+ when building optional native modules | . ",
    "url": "/getting-started/installation.html#prerequisites",
    
    "relUrl": "/getting-started/installation.html#prerequisites"
  },"52": {
    "doc": "Installation",
    "title": "Clone the Repository",
    "content": "git clone https://github.com/AWolf81/simple-rpc-ai-backend.git cd simple-rpc-ai-backend . ",
    "url": "/getting-started/installation.html#clone-the-repository",
    
    "relUrl": "/getting-started/installation.html#clone-the-repository"
  },"53": {
    "doc": "Installation",
    "title": "Standard Installation",
    "content": "corepack enable pnpm install pnpm build . The install script pulls model registry data and compiles the TypeScript server output in dist/. ",
    "url": "/getting-started/installation.html#standard-installation",
    
    "relUrl": "/getting-started/installation.html#standard-installation"
  },"54": {
    "doc": "Installation",
    "title": "Install Example Dependencies",
    "content": "The examples/* directories depend on the workspace copy of simple-rpc-ai-backend via a relative file:../../ reference. After installing the root workspace, run pnpm install (or npm install) inside each example you intend to try. Skipping this step will surface runtime errors such as Error [ERR_MODULE_NOT_FOUND]: Cannot find package 'simple-rpc-ai-backend' imported from .../examples/02-mcp-server/server.js. ",
    "url": "/getting-started/installation.html#install-example-dependencies",
    
    "relUrl": "/getting-started/installation.html#install-example-dependencies"
  },"55": {
    "doc": "Installation",
    "title": "Safe Installation Mode",
    "content": "If you hit native build issues (for example with bcrypt, cpu-features, or ssh2), run the safe installer which swaps in JavaScript fallbacks and ignores optional dependency failures. pnpm run install:safe . ",
    "url": "/getting-started/installation.html#safe-installation-mode",
    
    "relUrl": "/getting-started/installation.html#safe-installation-mode"
  },"56": {
    "doc": "Installation",
    "title": "Verify the Build",
    "content": "pnpm build node -e \"const pkg = require('./package.json'); console.log('✅', pkg.name, pkg.version);\" . ",
    "url": "/getting-started/installation.html#verify-the-build",
    
    "relUrl": "/getting-started/installation.html#verify-the-build"
  },"57": {
    "doc": "Installation",
    "title": "System Notes",
    "content": ". | Native module failures are non-blocking for runtime features. | The copy-assets script ensures all JSON data files are shipped with the build output. | . ",
    "url": "/getting-started/installation.html#system-notes",
    
    "relUrl": "/getting-started/installation.html#system-notes"
  },"58": {
    "doc": "MCP OAuth Authentication",
    "title": "MCP OAuth Authentication Configuration Guide",
    "content": "Complete guide for configuring authentication in the Model Context Protocol (MCP) server. ",
    "url": "/common-configurations/mcp-oauth-authentication.html#mcp-oauth-authentication-configuration-guide",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#mcp-oauth-authentication-configuration-guide"
  },"59": {
    "doc": "MCP OAuth Authentication",
    "title": "Table of Contents",
    "content": ". | Overview | Authentication Types | OAuth Configuration | JWT Configuration | Dual Authentication | Authentication Flows | Testing | Production Considerations | . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#table-of-contents",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#table-of-contents"
  },"60": {
    "doc": "MCP OAuth Authentication",
    "title": "Overview",
    "content": "The MCP server supports multiple authentication strategies via the authType configuration: . type MCPAuthType = 'oauth' | 'jwt' | 'both' | 'none'; . Default: 'oauth' (for backward compatibility) . When to Use Each Type . | Auth Type | Use Case | Best For | . | oauth | User-facing applications with browser-based login | Web apps, MCP Jam, Claude Desktop with OAuth | . | jwt | Service-to-service communication | APIs, automated tools, server integrations | . | both | Flexible environments supporting multiple clients | Enterprise deployments, multi-client systems | . | none | Development/testing only | Local testing, demos (NOT for production) | . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#overview",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#overview"
  },"61": {
    "doc": "MCP OAuth Authentication",
    "title": "Authentication Types",
    "content": "1. OAuth Authentication . OAuth 2.0 provides user-facing authentication with support for external providers (Google, GitHub, etc.). Configuration Location: src/trpc/routers/mcp/types.ts:6-37 . interface MCPAuthConfig { authType?: 'oauth'; // ⭐ Set this to 'oauth' oauth?: { enabled?: boolean; // Default: true when authType = 'oauth' sessionStorePath?: string; // Path to OAuth session storage requireValidSession?: boolean; // Default: true }; requireAuthForToolsList?: boolean; // Default: false (public discovery) requireAuthForToolsCall?: boolean; // Default: true (protected execution) publicTools?: string[]; // Tools exempt from auth } . 2. JWT Authentication . JSON Web Token authentication for service-to-service communication. interface MCPAuthConfig { authType?: 'jwt'; // ⭐ Set this to 'jwt' jwt?: { enabled?: boolean; // Default: true when authType = 'jwt' requireValidSignature?: boolean; // Default: true requiredScopes?: string[]; // Required JWT scopes (e.g., ['mcp', 'mcp:call']) allowExpiredTokens?: boolean; // Default: false }; } . 3. Dual Authentication (Both) . Support both OAuth and JWT simultaneously. interface MCPAuthConfig { authType?: 'both'; // ⭐ Set this to 'both' oauth?: { enabled?: boolean; requireValidSession?: boolean; }; jwt?: { enabled?: boolean; requiredScopes?: string[]; }; } . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#authentication-types",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#authentication-types"
  },"62": {
    "doc": "MCP OAuth Authentication",
    "title": "OAuth Configuration",
    "content": "Complete OAuth Setup . Step 1: Server-Level OAuth Configuration . Configure the OAuth server at the top level of your server config: . import { createRpcAiServer } from 'simple-rpc-ai-backend'; const server = createRpcAiServer({ port: 8082, // 🔐 Server-level OAuth configuration oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY || 'dev-key-min-32-chars-required!!', // Session storage options sessionStorage: { type: 'memory', // 'memory' | 'file' | 'redis' // For file storage: // filePath: './oauth-sessions.json', // For Redis: // redis: { // host: 'localhost', // port: 6379, // password: 'your-redis-password', // db: 0, // keyPrefix: 'oauth:' // } } }, // 🔧 Trust proxy configuration for reverse proxies (ngrok, Cloudflare, etc.) trustProxy: process.env.NODE_ENV === 'production' || process.env.TRUST_PROXY === 'true', // 🔧 MCP-specific OAuth configuration mcp: { enabled: true, auth: { authType: 'oauth', // ⭐ Required: Set authentication type oauth: { enabled: true, // Enable OAuth for MCP sessionStorePath: './sessions', // Optional: custom session path requireValidSession: true // Require valid OAuth session }, // Access control requireAuthForToolsList: false, // tools/list is public (discovery) requireAuthForToolsCall: true, // tools/call requires authentication publicTools: ['greeting', 'ping'] // Exception list for public tools } } }); server.start(); . Step 2: Environment Variables . Create .env.oauth file: . # Google OAuth2 Credentials GOOGLE_CLIENT_ID=your_client_id.apps.googleusercontent.com GOOGLE_CLIENT_SECRET=your_client_secret # Encryption key for token storage (min 32 characters) ENCRYPTION_KEY=your-secure-random-key-min-32-chars-required # Trust proxy for ngrok/CORS support TRUST_PROXY=true . Step 3: Trust Proxy Configuration (for ngrok/CORS) . Configure trust proxy for proper CORS handling behind reverse proxies: . # Environment variable for reverse proxy support TRUST_PROXY=true # Or enable based on environment NODE_ENV=production # Automatically enables trust proxy . Step 4: Google OAuth Setup . | Go to Google Cloud Console | Create OAuth 2.0 Client ID | Add authorized redirect URIs: . | Local: http://localhost:8082/oauth/callback | Ngrok: https://your-ngrok-id.ngrok.io/oauth/callback | . | Copy Client ID and Secret to .env.oauth | . See the Authentication guide for a full walkthrough of provider credential setup. OAuth Session Storage Options . Memory Storage (Development) . oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY, sessionStorage: { type: 'memory' } // ⚠️ Lost on restart } . Pros: Fast, simple setup Cons: Sessions lost on restart, not suitable for production . File Storage (Small Deployments) . oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY, sessionStorage: { type: 'file', filePath: './data/oauth-sessions.json' // Persistent file storage } } . Pros: Persistent across restarts, simple Cons: Not suitable for multi-server deployments . Redis Storage (Production) . oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY, sessionStorage: { type: 'redis', redis: { host: process.env.REDIS_HOST || 'localhost', port: parseInt(process.env.REDIS_PORT || '6379'), password: process.env.REDIS_PASSWORD, db: 0, keyPrefix: 'oauth:session:' } } } . Pros: Scalable, multi-server support, TTL support Cons: Requires Redis server . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#oauth-configuration",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#oauth-configuration"
  },"63": {
    "doc": "MCP OAuth Authentication",
    "title": "JWT Configuration",
    "content": "Complete JWT Setup . JWT authentication is ideal for service-to-service communication and API integrations. import { createRpcAiServer } from 'simple-rpc-ai-backend'; const server = createRpcAiServer({ port: 8082, // 🔐 JWT configuration (if using OpenSaaS or custom JWT) jwt: { secret: process.env.JWT_SECRET, issuer: 'your-service', audience: 'mcp-api' }, // 🔧 MCP-specific JWT configuration mcp: { enabled: true, auth: { authType: 'jwt', // ⭐ Set authentication type to JWT jwt: { enabled: true, // Enable JWT authentication requireValidSignature: true, // Verify JWT signature requiredScopes: ['mcp', 'mcp:call'], // Required scopes allowExpiredTokens: false // Reject expired tokens }, // Disable OAuth oauth: { enabled: false }, // Access control requireAuthForToolsList: true, // Require JWT for discovery requireAuthForToolsCall: true, // Require JWT for execution publicTools: [] // No public tools } } }); server.start(); . JWT Token Format . MCP clients should send JWT tokens in the Authorization header: . POST /mcp HTTP/1.1 Host: localhost:8082 Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... Content-Type: application/json { \"jsonrpc\": \"2.0\", \"method\": \"tools/call\", \"params\": { \"name\": \"greeting\", \"arguments\": {} }, \"id\": 1 } . JWT Payload Structure . { \"sub\": \"user-id-123\", \"email\": \"user@example.com\", \"scopes\": [\"mcp\", \"mcp:call\", \"mcp:admin\"], \"iss\": \"your-service\", \"aud\": \"mcp-api\", \"exp\": 1735689600, \"iat\": 1735603200 } . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#jwt-configuration",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#jwt-configuration"
  },"64": {
    "doc": "MCP OAuth Authentication",
    "title": "Dual Authentication",
    "content": "Support both OAuth and JWT authentication simultaneously. Use Cases . | Enterprise deployments: Web users via OAuth, services via JWT | Multi-client systems: Claude Desktop (OAuth) + automation scripts (JWT) | Migration periods: Gradual transition from OAuth to JWT or vice versa | . Configuration . import { createRpcAiServer } from 'simple-rpc-ai-backend'; const server = createRpcAiServer({ port: 8082, // Both OAuth and JWT server configs oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY, sessionStorage: { type: 'redis', redis: { /* ... */ } } }, jwt: { secret: process.env.JWT_SECRET, issuer: 'your-service', audience: 'mcp-api' }, // MCP with dual authentication mcp: { enabled: true, auth: { authType: 'both', // ⭐ Support both OAuth and JWT oauth: { enabled: true, requireValidSession: true }, jwt: { enabled: true, requireValidSignature: true, requiredScopes: ['mcp'], allowExpiredTokens: false }, // Access control (applies to both auth types) requireAuthForToolsList: false, // Public discovery requireAuthForToolsCall: true, // Auth required for execution publicTools: ['greeting'] // Public tools exception } } }); server.start(); . Authentication Priority . When authType: 'both', the server accepts either OAuth or JWT: . | Check for OAuth session (if oauth.enabled: true) | Check for JWT token (if jwt.enabled: true) | If both present, both are validated | If neither present and auth required → 401 Unauthorized | . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#dual-authentication",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#dual-authentication"
  },"65": {
    "doc": "MCP OAuth Authentication",
    "title": "Authentication Flows",
    "content": "OAuth Flow . sequenceDiagram participant Client as MCP Client (Browser) participant Server as MCP Server participant Google as Google OAuth 2.0 Client-&gt;&gt;Server: 1. GET /.well-known/... Server--&gt;&gt;Client: 2. OAuth metadata Client-&gt;&gt;Server: 3. Request /oauth/authorize Server-&gt;&gt;Google: 4. Redirect user to Google Google--&gt;&gt;Client: 5. Render login page Client-&gt;&gt;Google: 6. Submit credentials / consent Google--&gt;&gt;Server: 7. Redirect with authorization code Server-&gt;&gt;Google: 8. Exchange code for tokens (POST /oauth/token) Google--&gt;&gt;Server: 9. Return tokens + user info Server--&gt;&gt;Client: 10. Establish session / issue access token Client-&gt;&gt;Server: 11. POST /mcp (Authorization: Bearer token) Server--&gt;&gt;Client: 12. Execute tool and respond . JWT Flow . sequenceDiagram participant Client as MCP Client (Service) participant Server as MCP Server Client-&gt;&gt;Server: 1. POST /mcp (Authorization: Bearer &lt;jwt&gt;) Server-&gt;&gt;Server: 2. Validate JWT (signature, expiry, scopes) Server--&gt;&gt;Client: 3. Execute tool and respond . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#authentication-flows",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#authentication-flows"
  },"66": {
    "doc": "MCP OAuth Authentication",
    "title": "Testing",
    "content": "Local Testing with Ngrok . Step 1: Start the server with trust proxy enabled: . Note: the demo uses the OAuth configuration shown earlier (client IDs, secrets, and session storage). # Enable trust proxy for reverse proxy support export TRUST_PROXY=true # Or set in .env.oauth echo \"TRUST_PROXY=true\" &gt;&gt; .env.oauth # Start the OAuth-enabled server pnpm demo:oauth . Step 2: Start ngrok for local testing: . # Install ngrok if not already installed # npm install -g ngrok # or download from https://ngrok.com/ # Start ngrok tunnel to your local server ngrok http 8082 . Ngrok will output: . Session Status online Account Your Name (Plan: Free) Version 3.x.x Region United States (us-cal-1) Forwarding https://abc123.ngrok.io -&gt; http://localhost:8082 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 . Step 3: Update Google OAuth redirect URI: . | Go to Google Cloud Console | Edit your OAuth 2.0 Client ID | Add ngrok URL to authorized redirect URIs: . | https://abc123.ngrok.io/oauth/callback (replace abc123 with your ngrok ID) | . | . Step 4: Test OAuth with ngrok URL: . # Verify OAuth discovery works through ngrok curl https://abc123.ngrok.io/.well-known/oauth-authorization-server . Step 5: Test MCP with OAuth: . # In a separate terminal cd path/to/mcp-jam npm start . Visit http://localhost:4000 and connect to https://abc123.ngrok.io/mcp . The OAuth flow will now work correctly with ngrok because: . | trustProxy: true tells Express to trust X-Forwarded-* headers | CORS middleware can properly validate the origin from proxy headers | OAuth redirects use the ngrok URL instead of localhost | . OAuth Testing (Direct localhost) . ⚠️ Not recommended: configuring HTTPS correctly for localhost is difficult, and many MCP clients (including MCP Jam) require HTTPS. Prefer the ngrok-based workflow above for real testing. 1. Start the OAuth-enabled server: . pnpm demo:oauth . 2. Verify OAuth discovery endpoints: . curl http://localhost:8082/.well-known/oauth-authorization-server . Expected response: . { \"issuer\": \"http://localhost:8082\", \"authorization_endpoint\": \"http://localhost:8082/oauth/authorize\", \"token_endpoint\": \"http://localhost:8082/oauth/token\", \"userinfo_endpoint\": \"http://localhost:8082/oauth/userinfo\", \"registration_endpoint\": \"http://localhost:8082/register\", \"jwks_uri\": \"http://localhost:8082/.well-known/jwks.json\" } . 3. Test with MCP Jam (localhost): . # In a separate terminal cd path/to/mcp-jam npm start . Visit http://localhost:4000 and connect to http://localhost:8082/mcp . JWT Testing . 1. Generate a test JWT: . # Using jwt.io or a JWT library node -e \" const jwt = require('jsonwebtoken'); const token = jwt.sign( { sub: 'test-user', email: 'test@example.com', scopes: ['mcp', 'mcp:call'] }, 'your-jwt-secret', { expiresIn: '1h', issuer: 'your-service', audience: 'mcp-api' } ); console.log(token); \" . 2. Test MCP request with JWT: . curl -X POST http://localhost:8082/mcp \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\ -d '{ \"jsonrpc\": \"2.0\", \"method\": \"tools/list\", \"params\": {}, \"id\": 1 }' . Dual Authentication Testing . Test both OAuth and JWT work simultaneously: . # Test OAuth flow (use browser) open http://localhost:8082/oauth/authorize # Test JWT in same server curl -X POST http://localhost:8082/mcp \\ -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\ -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}' . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#testing",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#testing"
  },"67": {
    "doc": "MCP OAuth Authentication",
    "title": "Production Considerations",
    "content": "Security Checklist . | Use HTTPS: Never use OAuth over plain HTTP in production | Strong encryption keys: Min 32 characters, cryptographically random | Secure session storage: Use Redis or database, not memory/file | Token rotation: Implement refresh token rotation | Rate limiting: Enable rate limiting on auth endpoints | Audit logging: Enable security logging for auth events | Scope validation: Require specific scopes for sensitive operations | Token expiration: Set reasonable expiration times (1h access, 7d refresh) | . OAuth Production Config . const server = createRpcAiServer({ port: 443, // HTTPS oauth: { enabled: true, googleClientId: process.env.GOOGLE_CLIENT_ID, googleClientSecret: process.env.GOOGLE_CLIENT_SECRET, encryptionKey: process.env.ENCRYPTION_KEY, // From secrets manager sessionStorage: { type: 'redis', redis: { host: process.env.REDIS_HOST, port: 6379, password: process.env.REDIS_PASSWORD, db: 0, keyPrefix: 'oauth:prod:', tls: true // Enable TLS for Redis connection } } }, mcp: { enabled: true, auth: { authType: 'oauth', oauth: { enabled: true, requireValidSession: true }, requireAuthForToolsList: false, // Allow public discovery requireAuthForToolsCall: true, // Require auth for execution publicTools: [] // No public tools in production }, // Enable security features rateLimiting: { enabled: true, windowMs: 60000, maxRequests: 100, maxToolCalls: 50 }, securityLogging: { enabled: true, logLevel: 'info', logToFile: true, logFilePath: '/var/log/mcp-security.log' }, authEnforcement: { enabled: true, requireAuth: true, requireValidSession: true } } }); . JWT Production Config . const server = createRpcAiServer({ port: 443, jwt: { secret: process.env.JWT_SECRET, // From secrets manager issuer: process.env.JWT_ISSUER, audience: process.env.JWT_AUDIENCE }, mcp: { enabled: true, auth: { authType: 'jwt', jwt: { enabled: true, requireValidSignature: true, requiredScopes: ['mcp', 'mcp:call'], allowExpiredTokens: false }, oauth: { enabled: false }, requireAuthForToolsList: true, // Require JWT for everything requireAuthForToolsCall: true, publicTools: [] }, // Security features... rateLimiting: { enabled: true, maxRequests: 100 }, securityLogging: { enabled: true }, authEnforcement: { enabled: true } } }); . Environment Variables Best Practices . # Use a secrets manager (AWS Secrets Manager, HashiCorp Vault, etc.) # Never commit these to version control # OAuth GOOGLE_CLIENT_ID=from_secrets_manager GOOGLE_CLIENT_SECRET=from_secrets_manager ENCRYPTION_KEY=from_secrets_manager # JWT JWT_SECRET=from_secrets_manager JWT_ISSUER=your-service-name JWT_AUDIENCE=mcp-api # Redis REDIS_HOST=redis.production.internal REDIS_PORT=6379 REDIS_PASSWORD=from_secrets_manager REDIS_TLS=true # Server NODE_ENV=production TRUST_PROXY=true # Required for reverse proxy/CDN deployments PORT=443 LOG_LEVEL=info . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#production-considerations",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#production-considerations"
  },"68": {
    "doc": "MCP OAuth Authentication",
    "title": "Troubleshooting",
    "content": "Common Issues . Problem: “OAuth failed” with no clear error . Solution: . | Check Google OAuth redirect URI matches exactly | Verify client ID and secret in .env.oauth | Check server is running on correct port | Test discovery endpoint: curl http://localhost:8082/.well-known/oauth-authorization-server | If using ngrok/CDN: Ensure TRUST_PROXY=true is set | Verify OAuth redirect URI includes the ngrok/CDN URL for proxy setups | . Problem: JWT authentication fails with “Invalid signature” . Solution: . | Verify JWT secret matches between client and server | Check JWT payload includes required scopes | Verify issuer and audience match configuration | Check token hasn’t expired | . Problem: “Session not found” error with OAuth . Solution: . | Check session storage is properly configured | For Redis: verify connection with redis-cli ping | For file storage: verify write permissions | Check encryption key hasn’t changed (invalidates old sessions) | . Problem: MCP tools/call returns 401 even with valid token . Solution: . | Verify requireAuthForToolsCall: true is set | Check tool isn’t in publicTools list | Verify token/session is still valid | Check JWT scopes include ‘mcp:call’ | . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#troubleshooting",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#troubleshooting"
  },"69": {
    "doc": "MCP OAuth Authentication",
    "title": "Reference",
    "content": "Specifications . | Model Context Protocol Authorization (2025-06-18): modelcontextprotocol.io/specification/2025-06-18/basic/authorization | . Configuration Files . | Type definitions: src/trpc/routers/mcp/types.ts | Server config: src/rpc-ai-server.ts#L111-L128 | Protocol handler: src/trpc/routers/mcp/protocol-handler.ts | . Test Helpers . | OAuth config: createOAuthMCPConfig() in src/security/test-helpers.ts#L187-L199 | JWT config: createJWTMCPConfig() in src/security/test-helpers.ts#L163-L182 | . Examples . | Recommended OAuth walkthrough: Use the examples/02-mcp-server project (pnpm install &amp;&amp; pnpm start inside that folder) to exercise the OAuth configuration described above. | Basic server: examples/01-basic-server/server.js | MCP server: examples/02-mcp-server/server.js | . ",
    "url": "/common-configurations/mcp-oauth-authentication.html#reference",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html#reference"
  },"70": {
    "doc": "MCP OAuth Authentication",
    "title": "MCP OAuth Authentication",
    "content": " ",
    "url": "/common-configurations/mcp-oauth-authentication.html",
    
    "relUrl": "/common-configurations/mcp-oauth-authentication.html"
  },"71": {
    "doc": "Methods",
    "title": "Namespace ai",
    "content": " ",
    "url": "/server-api/methods.html#namespace-ai",
    
    "relUrl": "/server-api/methods.html#namespace-ai"
  },"72": {
    "doc": "Methods",
    "title": "ai.generateText",
    "content": "MUTATIONai.generateTextAuth requiredsrc/trpc/routers/ai/methods/generation.ts:58 Generate structured text completions across supported AI providers. Executes guarded text generation with system prompt protection, token metering, and BYOK handling for authenticated and public callers. 📥Input Parameters ⚡{} . | content string | systemPrompt string | provider enumoptional Allowed valuesanthropicopenaigoogleopenrouter | apiKey stringoptional | metadata objectoptional . | name stringoptional | type stringoptional | . | options objectoptional . | model stringoptional | maxTokens numberoptionaldefault | temperature numberoptional | . | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;content&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;systemPrompt&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot;, &quot;openrouter&quot; ] } }, &quot;apiKey&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;metadata&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;type&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } }, &quot;options&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;model&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;maxTokens&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } }, &quot;temperature&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } } } } . 📤Response {} . | success boolean | data any | tokenUsage objectoptional . | tokensUsed number | tokensCharged number | platformFee numbernullable | remainingBalance numbernullable | . | usageInfo objectoptional . | tokensUsed number | estimatedCostUsd number | . | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;data&quot;: { &quot;type&quot;: &quot;ZodAny&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;any&quot; }, &quot;tokenUsage&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;tokensUsed&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;tokensCharged&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;platformFee&quot;: { &quot;type&quot;: &quot;ZodNullable&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;nullable&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;remainingBalance&quot;: { &quot;type&quot;: &quot;ZodNullable&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;nullable&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } }, &quot;usageInfo&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;tokensUsed&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;estimatedCostUsd&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } } } . Examples const { data } = await client.ai.generateText.mutate({ content: 'Compose a friendly onboarding email for new engineers.', systemPrompt: 'You are a helpful onboarding assistant.', }); console.log(data.success, data.data?.usage?.totalTokens); . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.generateText&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.generateText.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#aigeneratetext",
    
    "relUrl": "/server-api/methods.html#aigeneratetext"
  },"73": {
    "doc": "Methods",
    "title": "ai.getRegistryHealth",
    "content": "QUERYai.getRegistryHealthPublicsrc/trpc/routers/ai/methods/providers.ts:107 Retrieve the AI model registry health status. Reports availability and summary metrics for the registry integration, falling back to error details when checks fail. 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.getRegistryHealth&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.getRegistryHealth.query(); console.log(result); . ",
    "url": "/server-api/methods.html#aigetregistryhealth",
    
    "relUrl": "/server-api/methods.html#aigetregistryhealth"
  },"74": {
    "doc": "Methods",
    "title": "ai.listAllowedModels",
    "content": "QUERYai.listAllowedModelsPublicsrc/trpc/routers/ai/methods/providers.ts:70 List allowed models for a provider respecting configured restrictions. Provides production-ready model identifiers for a single provider or a map of providers to models. 📥Input Parameters ⚡{} . | provider enumoptional Allowed valuesanthropicopenaigoogleopenrouter | . { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;provider&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot;, &quot;openrouter&quot; ] } } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.listAllowedModels&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.listAllowedModels.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#ailistallowedmodels",
    
    "relUrl": "/server-api/methods.html#ailistallowedmodels"
  },"75": {
    "doc": "Methods",
    "title": "ai.listProviders",
    "content": "QUERYai.listProvidersPublicsrc/trpc/routers/ai/methods/providers.ts:22 List available AI service providers. Returns the providers currently registered in the model registry along with metadata about the registry source. 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.listProviders&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.listProviders.query(); console.log(result); . ",
    "url": "/server-api/methods.html#ailistproviders",
    
    "relUrl": "/server-api/methods.html#ailistproviders"
  },"76": {
    "doc": "Methods",
    "title": "ai.listProvidersBYOK",
    "content": "QUERYai.listProvidersBYOKPublicsrc/trpc/routers/ai/methods/providers.ts:46 List available BYOK (Bring Your Own Key) providers. Filters the provider catalog to only those eligible for user-supplied API keys. 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.listProvidersBYOK&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.listProvidersBYOK.query(); console.log(result); . ",
    "url": "/server-api/methods.html#ailistprovidersbyok",
    
    "relUrl": "/server-api/methods.html#ailistprovidersbyok"
  },"77": {
    "doc": "Methods",
    "title": "ai.validateProvider",
    "content": "MUTATIONai.validateProviderPublicsrc/trpc/routers/ai/methods/providers.ts:148 Validate AI provider configuration. Performs lightweight API key validation for supported providers to catch obvious misconfigurations. 📥Input Parameters ⚡{} . | provider enum Allowed valuesanthropicopenaigoogle | apiKey string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] }, &quot;apiKey&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ai.validateProvider&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.ai.validateProvider.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#aivalidateprovider",
    
    "relUrl": "/server-api/methods.html#aivalidateprovider"
  },"78": {
    "doc": "Methods",
    "title": "Namespace mcp",
    "content": " ",
    "url": "/server-api/methods.html#namespace-mcp",
    
    "relUrl": "/server-api/methods.html#namespace-mcp"
  },"79": {
    "doc": "Methods",
    "title": "mcp.apiDocumentationPrompt",
    "content": "QUERYmcp.apiDocumentationPromptPublicsrc/trpc/routers/mcp/methods/prompt.ts:89 Generate comprehensive API documentation from code . 📥Input Parameters ⚡{} . | code string API code to document | format enumdefault Output format Allowed valuesmarkdownopenapijson | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;code&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;API code to document&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;format&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Output format&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;markdown&quot;, &quot;openapi&quot;, &quot;json&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.apiDocumentationPrompt&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.apiDocumentationPrompt.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpapidocumentationprompt",
    
    "relUrl": "/server-api/methods.html#mcpapidocumentationprompt"
  },"80": {
    "doc": "Methods",
    "title": "mcp.codeReviewPrompt",
    "content": "QUERYmcp.codeReviewPromptPublicsrc/trpc/routers/mcp/methods/prompt.ts:19 Comprehensive code review with security, performance, and maintainability analysis . 📥Input Parameters ⚡{} . | code string Code to review | language string Programming language | focusArea stringoptional Focus area | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;code&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Code to review&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;language&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Programming language&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;focusArea&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Focus area&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.codeReviewPrompt&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.codeReviewPrompt.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpcodereviewprompt",
    
    "relUrl": "/server-api/methods.html#mcpcodereviewprompt"
  },"81": {
    "doc": "Methods",
    "title": "mcp.currentSystemTime",
    "content": "QUERYmcp.currentSystemTimePublicsrc/trpc/routers/mcp/methods/utility.ts:50 Get the current system time . 📥Input Parameters ⚡{} . | format enumdefault Time format Allowed valuesisotimestamplocale | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;format&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Time format&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;iso&quot;, &quot;timestamp&quot;, &quot;locale&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.currentSystemTime&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.currentSystemTime.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpcurrentsystemtime",
    
    "relUrl": "/server-api/methods.html#mcpcurrentsystemtime"
  },"82": {
    "doc": "Methods",
    "title": "mcp.echo",
    "content": "QUERYmcp.echoPublicsrc/trpc/routers/mcp/methods/utility.ts:36 Echo back a message . 📥Input Parameters ⚡{} . | message string Message to echo back | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Message to echo back&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.echo&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.echo.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpecho",
    
    "relUrl": "/server-api/methods.html#mcpecho"
  },"83": {
    "doc": "Methods",
    "title": "mcp.explainConceptPrompt",
    "content": "QUERYmcp.explainConceptPromptPublicsrc/trpc/routers/mcp/methods/prompt.ts:152 Explain technical concepts clearly at different skill levels . 📥Input Parameters ⚡{} . | concept string Concept to explain | level enum Skill level Allowed valuesbeginnerintermediateadvanced | includeExamples enumdefault Include examples Allowed valuesyesno | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;concept&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Concept to explain&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;level&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Skill level&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;beginner&quot;, &quot;intermediate&quot;, &quot;advanced&quot; ] }, &quot;includeExamples&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include examples&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;yes&quot;, &quot;no&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.explainConceptPrompt&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.explainConceptPrompt.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpexplainconceptprompt",
    
    "relUrl": "/server-api/methods.html#mcpexplainconceptprompt"
  },"84": {
    "doc": "Methods",
    "title": "mcp.getResources",
    "content": "QUERYmcp.getResourcesPublicsrc/trpc/routers/mcp/methods/resource.ts:12 List MCP resources List available MCP resources with metadata . 📥Input Parameters ⚡{} . | category stringoptional Filter resources by category | search stringoptional Search resources by name or description | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;category&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Filter resources by category&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;search&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Search resources by name or description&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } . 📤Response {} . | resources arrayarray | total number | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;resources&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } }, &quot;total&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.getResources&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.getResources.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpgetresources",
    
    "relUrl": "/server-api/methods.html#mcpgetresources"
  },"85": {
    "doc": "Methods",
    "title": "mcp.greeting",
    "content": "QUERYmcp.greetingPublicsrc/trpc/routers/mcp/methods/utility.ts:15 Generate a friendly greeting in the specified language . 📥Input Parameters ⚡{} . | name string Name to greet | language enumdefault Language for the greeting Allowed valuesenesfrde | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Name to greet&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;language&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Language for the greeting&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;de&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.greeting&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.greeting.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpgreeting",
    
    "relUrl": "/server-api/methods.html#mcpgreeting"
  },"86": {
    "doc": "Methods",
    "title": "mcp.incidentResponsePrompt",
    "content": "QUERYmcp.incidentResponsePromptPublicsrc/trpc/routers/mcp/methods/prompt.ts:235 Guide incident response procedures and provide action steps . 📥Input Parameters ⚡{} . | description string Incident description | severity enum Severity level Allowed valuescriticalhighmediumlow | status stringoptional Current status | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;description&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Incident description&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;severity&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Severity level&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;critical&quot;, &quot;high&quot;, &quot;medium&quot;, &quot;low&quot; ] }, &quot;status&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Current status&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.incidentResponsePrompt&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.incidentResponsePrompt.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpincidentresponseprompt",
    
    "relUrl": "/server-api/methods.html#mcpincidentresponseprompt"
  },"87": {
    "doc": "Methods",
    "title": "mcp.readResource",
    "content": "QUERYmcp.readResourcePublicsrc/trpc/routers/mcp/methods/resource.ts:114 Read resource content Read the content of a specific MCP resource . 📥Input Parameters ⚡{} . | uri string URI of the resource to read | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;uri&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;URI of the resource to read&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response {} . | content any | mimeType string | uri string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;content&quot;: { &quot;type&quot;: &quot;ZodAny&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;any&quot; }, &quot;mimeType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;uri&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;mcp.readResource&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.mcp.readResource.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#mcpreadresource",
    
    "relUrl": "/server-api/methods.html#mcpreadresource"
  },"88": {
    "doc": "Methods",
    "title": "Namespace admin",
    "content": " ",
    "url": "/server-api/methods.html#namespace-admin",
    
    "relUrl": "/server-api/methods.html#namespace-admin"
  },"89": {
    "doc": "Methods",
    "title": "admin.clearCache",
    "content": "MUTATIONadmin.clearCachePublicsrc/trpc/routers/admin/index.ts:339 Clear caches and reset services Clear caches and reset services . Clear system caches and reset services . 📥Input Parameters ⚡{} . | target enumdefault Allowed valuesallmemorytokensusage | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;target&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;all&quot;, &quot;memory&quot;, &quot;tokens&quot;, &quot;usage&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.clearCache&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.clearCache.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#adminclearcache",
    
    "relUrl": "/server-api/methods.html#adminclearcache"
  },"90": {
    "doc": "Methods",
    "title": "admin.getConfig",
    "content": "QUERYadmin.getConfigPublicsrc/trpc/routers/admin/index.ts:228 System configuration management System configuration management . Get current system configuration . 📥Input Parameters ⚡{} . | section enumdefault Allowed valuesallserverauthaibilling | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;section&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;all&quot;, &quot;server&quot;, &quot;auth&quot;, &quot;ai&quot;, &quot;billing&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.getConfig&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.getConfig.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#admingetconfig",
    
    "relUrl": "/server-api/methods.html#admingetconfig"
  },"91": {
    "doc": "Methods",
    "title": "admin.getUserInfo",
    "content": "QUERYadmin.getUserInfoPublicsrc/trpc/routers/admin/index.ts:185 Get user information (admin only) Get user information (admin only) . Get detailed user information and permissions . 📥Input Parameters ⚡{} . | userId string User ID to lookup | includePermissions booleandefault Include detailed permissions | includeUsage booleandefault Include usage statistics | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;userId&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;User ID to lookup&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;includePermissions&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include detailed permissions&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;includeUsage&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include usage statistics&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.getUserInfo&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.getUserInfo.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#admingetuserinfo",
    
    "relUrl": "/server-api/methods.html#admingetuserinfo"
  },"92": {
    "doc": "Methods",
    "title": "admin.healthCheck",
    "content": "QUERYadmin.healthCheckPublicsrc/trpc/routers/admin/index.ts:288 System health checks System health checks . Run comprehensive health checks on all services . 📥Input Parameters ⚡ Not documented. 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.healthCheck&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.healthCheck.query(); console.log(result); . ",
    "url": "/server-api/methods.html#adminhealthcheck",
    
    "relUrl": "/server-api/methods.html#adminhealthcheck"
  },"93": {
    "doc": "Methods",
    "title": "admin.statistics",
    "content": "QUERYadmin.statisticsPublicsrc/trpc/routers/admin/index.ts:121 Get system statistics Get system statistics . Get detailed system statistics and metrics . 📥Input Parameters ⚡{} . | days numberdefault Number of days for statistics | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;days&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Number of days for statistics&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.statistics&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.statistics.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#adminstatistics",
    
    "relUrl": "/server-api/methods.html#adminstatistics"
  },"94": {
    "doc": "Methods",
    "title": "admin.status",
    "content": "QUERYadmin.statusPublicsrc/trpc/routers/admin/index.ts:58 Server status with detailed information Server status with detailed information . Get detailed server status and health information . 📥Input Parameters ⚡{} . | detailed booleandefault Include detailed system information | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;detailed&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include detailed system information&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response {} . | status string | uptime number | memory object . | used number | total number | percentage number | . | system objectoptional . | platform string | arch string | nodeVersion string | . | timestamp string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;status&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;uptime&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;memory&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;used&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;total&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;percentage&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } }, &quot;system&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;platform&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;arch&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;nodeVersion&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } }, &quot;timestamp&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;admin.status&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.admin.status.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#adminstatus",
    
    "relUrl": "/server-api/methods.html#adminstatus"
  },"95": {
    "doc": "Methods",
    "title": "Namespace auth",
    "content": " ",
    "url": "/server-api/methods.html#namespace-auth",
    
    "relUrl": "/server-api/methods.html#namespace-auth"
  },"96": {
    "doc": "Methods",
    "title": "auth.deleteUserKey",
    "content": "MUTATIONauth.deleteUserKeyAuth requiredsrc/trpc/routers/auth/index.ts:199 Delete user API key Delete user API key . 📥Input Parameters ⚡{} . | email string | provider enum Allowed valuesanthropicopenaigoogle | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.deleteUserKey&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.deleteUserKey.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authdeleteuserkey",
    
    "relUrl": "/server-api/methods.html#authdeleteuserkey"
  },"97": {
    "doc": "Methods",
    "title": "auth.getUserKey",
    "content": "QUERYauth.getUserKeyAuth requiredsrc/trpc/routers/auth/index.ts:52 Get user API key status (without exposing the key) Get user API key status (without exposing the key) . 📥Input Parameters ⚡{} . | email string | provider enum Allowed valuesanthropicopenaigoogle | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.getUserKey&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.getUserKey.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authgetuserkey",
    
    "relUrl": "/server-api/methods.html#authgetuserkey"
  },"98": {
    "doc": "Methods",
    "title": "auth.getUserProviders",
    "content": "QUERYauth.getUserProvidersAuth requiredsrc/trpc/routers/auth/index.ts:90 Get all configured providers for a user Get all configured providers for a user . 📥Input Parameters ⚡{} . | email string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.getUserProviders&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.getUserProviders.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authgetuserproviders",
    
    "relUrl": "/server-api/methods.html#authgetuserproviders"
  },"99": {
    "doc": "Methods",
    "title": "auth.rotateUserKey",
    "content": "MUTATIONauth.rotateUserKeyAuth requiredsrc/trpc/routers/auth/index.ts:162 Rotate (update) user API key Rotate (update) user API key . 📥Input Parameters ⚡{} . | email string | provider enum Allowed valuesanthropicopenaigoogle | newApiKey string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] }, &quot;newApiKey&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.rotateUserKey&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.rotateUserKey.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authrotateuserkey",
    
    "relUrl": "/server-api/methods.html#authrotateuserkey"
  },"100": {
    "doc": "Methods",
    "title": "auth.storeUserKey",
    "content": "MUTATIONauth.storeUserKeyAuth requiredsrc/trpc/routers/auth/index.ts:15 Store user API key (BYOK) Store user API key (BYOK) . 📥Input Parameters ⚡{} . | email string | provider enum Allowed valuesanthropicopenaigoogle | apiKey string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] }, &quot;apiKey&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.storeUserKey&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.storeUserKey.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authstoreuserkey",
    
    "relUrl": "/server-api/methods.html#authstoreuserkey"
  },"101": {
    "doc": "Methods",
    "title": "auth.validateUserKey",
    "content": "MUTATIONauth.validateUserKeyAuth requiredsrc/trpc/routers/auth/index.ts:128 Validate user API key Validate user API key . 📥Input Parameters ⚡{} . | email string | provider enum Allowed valuesanthropicopenaigoogle | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;email&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;provider&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;anthropic&quot;, &quot;openai&quot;, &quot;google&quot; ] } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;auth.validateUserKey&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.auth.validateUserKey.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#authvalidateuserkey",
    
    "relUrl": "/server-api/methods.html#authvalidateuserkey"
  },"102": {
    "doc": "Methods",
    "title": "Namespace billing",
    "content": " ",
    "url": "/server-api/methods.html#namespace-billing",
    
    "relUrl": "/server-api/methods.html#namespace-billing"
  },"103": {
    "doc": "Methods",
    "title": "billing.getConsumptionHistory",
    "content": "QUERYbilling.getConsumptionHistoryAuth requiredsrc/trpc/routers/billing/index.ts:92 Get consumption history for user Get consumption history for user . 📥Input Parameters ⚡{} . | limit numberdefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;limit&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getConsumptionHistory&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getConsumptionHistory.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billinggetconsumptionhistory",
    
    "relUrl": "/server-api/methods.html#billinggetconsumptionhistory"
  },"104": {
    "doc": "Methods",
    "title": "billing.getPurchaseHistory",
    "content": "QUERYbilling.getPurchaseHistoryAuth requiredsrc/trpc/routers/billing/index.ts:215 Get user&#39;s purchase history (both subscription and one-time) Get user&#39;s purchase history (both subscription and one-time) . 📥Input Parameters ⚡{} . | limit numberdefault | type enumdefault Allowed valuesallsubscriptionone_time | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;limit&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;type&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;all&quot;, &quot;subscription&quot;, &quot;one_time&quot; ] } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getPurchaseHistory&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getPurchaseHistory.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billinggetpurchasehistory",
    
    "relUrl": "/server-api/methods.html#billinggetpurchasehistory"
  },"105": {
    "doc": "Methods",
    "title": "billing.getTokenBalance",
    "content": "QUERYbilling.getTokenBalanceAuth requiredsrc/trpc/routers/billing/index.ts:111 Get user&#39;s token balance (requires authentication) Get user&#39;s token balance (requires authentication) . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getTokenBalance&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getTokenBalance.query(); console.log(result); . ",
    "url": "/server-api/methods.html#billinggettokenbalance",
    
    "relUrl": "/server-api/methods.html#billinggettokenbalance"
  },"106": {
    "doc": "Methods",
    "title": "billing.getTopupHistory",
    "content": "QUERYbilling.getTopupHistoryAuth requiredsrc/trpc/routers/billing/index.ts:163 Get user&#39;s token purchase history (requires authentication) Get user&#39;s token purchase history (requires authentication) . 📥Input Parameters ⚡{} . | limit numberdefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;limit&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getTopupHistory&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getTopupHistory.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billinggettopuphistory",
    
    "relUrl": "/server-api/methods.html#billinggettopuphistory"
  },"107": {
    "doc": "Methods",
    "title": "billing.getUsageAnalytics",
    "content": "QUERYbilling.getUsageAnalyticsAuth requiredsrc/trpc/routers/billing/index.ts:182 Get user&#39;s complete usage analytics (for both subscription and BYOK users) Get user&#39;s complete usage analytics (for both subscription and BYOK users) . 📥Input Parameters ⚡{} . | days numberdefault | includeHistory booleandefault | historyLimit numberdefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;days&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;includeHistory&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;historyLimit&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getUsageAnalytics&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getUsageAnalytics.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billinggetusageanalytics",
    
    "relUrl": "/server-api/methods.html#billinggetusageanalytics"
  },"108": {
    "doc": "Methods",
    "title": "billing.getUsageHistory",
    "content": "QUERYbilling.getUsageHistoryAuth requiredsrc/trpc/routers/billing/index.ts:144 Get user&#39;s token usage history (requires authentication) Get user&#39;s token usage history (requires authentication) . 📥Input Parameters ⚡{} . | limit numberdefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;limit&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getUsageHistory&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getUsageHistory.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billinggetusagehistory",
    
    "relUrl": "/server-api/methods.html#billinggetusagehistory"
  },"109": {
    "doc": "Methods",
    "title": "billing.getUserTokenBalances",
    "content": "QUERYbilling.getUserTokenBalancesAuth requiredsrc/trpc/routers/billing/index.ts:26 Get user&#39;s token balances (all types) Get user&#39;s token balances (all types) . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.getUserTokenBalances&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.getUserTokenBalances.query(); console.log(result); . ",
    "url": "/server-api/methods.html#billinggetusertokenbalances",
    
    "relUrl": "/server-api/methods.html#billinggetusertokenbalances"
  },"110": {
    "doc": "Methods",
    "title": "billing.planConsumption",
    "content": "QUERYbilling.planConsumptionAuth requiredsrc/trpc/routers/billing/index.ts:58 Plan token consumption for a request (preview before execution) Plan token consumption for a request (preview before execution) . 📥Input Parameters ⚡{} . | estimatedTokens number | hasApiKey booleandefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;estimatedTokens&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;hasApiKey&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;billing.planConsumption&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.billing.planConsumption.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#billingplanconsumption",
    
    "relUrl": "/server-api/methods.html#billingplanconsumption"
  },"111": {
    "doc": "Methods",
    "title": "Namespace system",
    "content": " ",
    "url": "/server-api/methods.html#namespace-system",
    
    "relUrl": "/server-api/methods.html#namespace-system"
  },"112": {
    "doc": "Methods",
    "title": "system.addServerWorkspace",
    "content": "MUTATIONsystem.addServerWorkspacePublicsrc/trpc/routers/system/index.ts:275 Add a new server workspace configuration Add a new server workspace configuration . Add a new server workspace configuration for file operations . 📥Input Parameters ⚡{} . | id string Unique identifier for the workspace folder | config object . | path string Absolute path to the workspace folder | name stringoptional Display name for the workspace folder | description stringoptional Description of the workspace folder purpose | readOnly booleandefault Whether this server workspace is read-only | allowedPaths arrayoptionalarray Allowed path patterns (glob) | blockedPaths arrayoptionalarray Blocked path patterns (glob) | maxFileSize numberoptional Maximum file size in bytes | allowedExtensions arrayoptionalarray Allowed file extensions | blockedExtensions arrayoptionalarray Blocked file extensions | followSymlinks booleandefault Whether to follow symbolic links | enableWatching booleandefault Whether to watch for file changes | . | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Unique identifier for the workspace folder&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;config&quot;: { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Absolute path to the workspace folder&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Display name for the workspace folder&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;description&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Description of the workspace folder purpose&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;readOnly&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Whether this server workspace is read-only&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;allowedPaths&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Allowed path patterns (glob)&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } }, &quot;blockedPaths&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Blocked path patterns (glob)&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } }, &quot;maxFileSize&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Maximum file size in bytes&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;allowedExtensions&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Allowed file extensions&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } }, &quot;blockedExtensions&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Blocked file extensions&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } }, &quot;followSymlinks&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Whether to follow symbolic links&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;enableWatching&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Whether to watch for file changes&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } } } . 📤Response {} . | success boolean | id string | message string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.addServerWorkspace&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.addServerWorkspace.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemaddserverworkspace",
    
    "relUrl": "/server-api/methods.html#systemaddserverworkspace"
  },"113": {
    "doc": "Methods",
    "title": "system.getServerWorkspaces",
    "content": "QUERYsystem.getServerWorkspacesPublicsrc/trpc/routers/system/index.ts:83 Get configured server workspaces for client applications Get configured server workspaces for client applications . Get all configured server workspaces with accessibility status . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response {} No structured fields (record) { &quot;type&quot;: &quot;ZodRecord&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.getServerWorkspaces&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.getServerWorkspaces.query(); console.log(result); . ",
    "url": "/server-api/methods.html#systemgetserverworkspaces",
    
    "relUrl": "/server-api/methods.html#systemgetserverworkspaces"
  },"114": {
    "doc": "Methods",
    "title": "system.health",
    "content": "QUERYsystem.healthPublicsrc/trpc/routers/system/index.ts:69 Health check procedure Health check procedure . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.health&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.health.query(); console.log(result); . ",
    "url": "/server-api/methods.html#systemhealth",
    
    "relUrl": "/server-api/methods.html#systemhealth"
  },"115": {
    "doc": "Methods",
    "title": "system.listClientWorkspaces",
    "content": "QUERYsystem.listClientWorkspacesPublicsrc/trpc/routers/system/index.ts:423 List registered client workspaces (MCP client roots) List registered client workspaces (MCP client roots) This is separate from server workspaces and MCP roots/list . List all registered client workspace folders . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response {} No structured fields (array) { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.listClientWorkspaces&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.listClientWorkspaces.query(); console.log(result); . ",
    "url": "/server-api/methods.html#systemlistclientworkspaces",
    
    "relUrl": "/server-api/methods.html#systemlistclientworkspaces"
  },"116": {
    "doc": "Methods",
    "title": "system.listFiles",
    "content": "QUERYsystem.listFilesPublicsrc/trpc/routers/system/index.ts:16 List files and directories in a configured root folder . 📥Input Parameters ⚡{} . | workspaceId enum Server workspace ID Allowed valuesdefault | path stringdefault Relative path within workspace folder | recursive booleandefault Include subdirectories recursively | includeDirectories booleandefault Include directories in results | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;workspaceId&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Server workspace ID&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;default&quot; ] }, &quot;path&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Relative path within workspace folder&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;recursive&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include subdirectories recursively&quot;, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;includeDirectories&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Include directories in results&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response {} No structured fields (array) { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.listFiles&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.listFiles.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemlistfiles",
    
    "relUrl": "/server-api/methods.html#systemlistfiles"
  },"117": {
    "doc": "Methods",
    "title": "system.pathExists",
    "content": "QUERYsystem.pathExistsPublicsrc/trpc/routers/system/index.ts:19 Check if a file or directory exists in a configured root folder . 📥Input Parameters ⚡{} . | workspaceId enum Server workspace ID Allowed valuesdefault | path string Relative path within workspace folder | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;workspaceId&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Server workspace ID&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;default&quot; ] }, &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Relative path within workspace folder&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response {} . | exists boolean | path string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;exists&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.pathExists&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.pathExists.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systempathexists",
    
    "relUrl": "/server-api/methods.html#systempathexists"
  },"118": {
    "doc": "Methods",
    "title": "system.readFile",
    "content": "QUERYsystem.readFilePublicsrc/trpc/routers/system/index.ts:17 Read the content of a file from a configured root folder . 📥Input Parameters ⚡{} . | workspaceId enum Server workspace ID Allowed valuesdefault | path string Relative file path within workspace folder | encoding enumdefault File encoding Allowed valuesutf8base64binary | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;workspaceId&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Server workspace ID&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;default&quot; ] }, &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Relative file path within workspace folder&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;encoding&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;File encoding&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;utf8&quot;, &quot;base64&quot;, &quot;binary&quot; ] } } } } . 📤Response {} . | content string | size number | encoding string | mimeType stringoptional | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;content&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;size&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; }, &quot;encoding&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;mimeType&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.readFile&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.readFile.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemreadfile",
    
    "relUrl": "/server-api/methods.html#systemreadfile"
  },"119": {
    "doc": "Methods",
    "title": "system.registerClientWorkspace",
    "content": "MUTATIONsystem.registerClientWorkspacePublicsrc/trpc/routers/system/index.ts:357 Register a client workspace (MCP client root) Register a client workspace (MCP client root) This allows MCP clients to dynamically register their workspace folders . Register a client workspace folder for MCP access . 📥Input Parameters ⚡{} . | id string Unique identifier for the client workspace | uri string File URI of the client workspace (e.g., file:///path/to/folder) | name stringoptional Display name for the workspace | description stringoptional Description of the workspace | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Unique identifier for the client workspace&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;uri&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;File URI of the client workspace (e.g., file:///path/to/folder)&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;name&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Display name for the workspace&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } }, &quot;description&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: &quot;Description of the workspace&quot;, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } . 📤Response {} . | success boolean | id string | message string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.registerClientWorkspace&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.registerClientWorkspace.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemregisterclientworkspace",
    
    "relUrl": "/server-api/methods.html#systemregisterclientworkspace"
  },"120": {
    "doc": "Methods",
    "title": "system.removeServerWorkspace",
    "content": "MUTATIONsystem.removeServerWorkspacePublicsrc/trpc/routers/system/index.ts:325 Remove a server workspace configuration Remove a server workspace configuration . 📥Input Parameters ⚡{} . | id string Server workspace ID to remove | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Server workspace ID to remove&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response {} . | success boolean | id string | message string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.removeServerWorkspace&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.removeServerWorkspace.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemremoveserverworkspace",
    
    "relUrl": "/server-api/methods.html#systemremoveserverworkspace"
  },"121": {
    "doc": "Methods",
    "title": "system.test",
    "content": "MUTATIONsystem.testPublicsrc/trpc/routers/system/index.ts:56 Simple test procedure with minimal Zod schema Simple test procedure with minimal Zod schema . Just a echo test endpoint . 📥Input Parameters ⚡{} . | message stringoptionaldefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;message&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } } } . 📤Response {} . | message string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.test&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.test.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemtest",
    
    "relUrl": "/server-api/methods.html#systemtest"
  },"122": {
    "doc": "Methods",
    "title": "system.unregisterClientWorkspace",
    "content": "MUTATIONsystem.unregisterClientWorkspacePublicsrc/trpc/routers/system/index.ts:393 Unregister a client workspace (MCP client root) Unregister a client workspace (MCP client root) . Unregister a client workspace folder . 📥Input Parameters ⚡{} . | id string Client workspace ID to unregister | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Client workspace ID to unregister&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . 📤Response {} . | success boolean | id string | message string | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;id&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;message&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.unregisterClientWorkspace&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.unregisterClientWorkspace.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemunregisterclientworkspace",
    
    "relUrl": "/server-api/methods.html#systemunregisterclientworkspace"
  },"123": {
    "doc": "Methods",
    "title": "system.writeFile",
    "content": "MUTATIONsystem.writeFilePublicsrc/trpc/routers/system/index.ts:18 Write content to a file in a configured root folder . 📥Input Parameters ⚡{} . | workspaceId enum Server workspace ID Allowed valuesdefault | path string Relative file path within workspace folder | content string File content to write | encoding enumdefault Content encoding Allowed valuesutf8base64binary | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;workspaceId&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: &quot;Server workspace ID&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;default&quot; ] }, &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;Relative file path within workspace folder&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;content&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: &quot;File content to write&quot;, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;encoding&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: &quot;Content encoding&quot;, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodEnum&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;enum&quot;, &quot;enum&quot;: [ &quot;utf8&quot;, &quot;base64&quot;, &quot;binary&quot; ] } } } } . 📤Response {} . | success boolean | path string | size number | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;success&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; }, &quot;path&quot;: { &quot;type&quot;: &quot;ZodString&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;string&quot; }, &quot;size&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } } } . Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;system.writeFile&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.system.writeFile.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#systemwritefile",
    
    "relUrl": "/server-api/methods.html#systemwritefile"
  },"124": {
    "doc": "Methods",
    "title": "Namespace user",
    "content": " ",
    "url": "/server-api/methods.html#namespace-user",
    
    "relUrl": "/server-api/methods.html#namespace-user"
  },"125": {
    "doc": "Methods",
    "title": "user.checkRequestEligibility",
    "content": "QUERYuser.checkRequestEligibilityAuth requiredsrc/trpc/routers/user/index.ts:189 Check if user can make AI requests (subscription users need tokens, BYOK users need API key) Check if user can make AI requests (subscription users need tokens, BYOK users need API key) . 📥Input Parameters ⚡{} . | estimatedTokens numberdefault | hasApiKey booleandefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;estimatedTokens&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;hasApiKey&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.checkRequestEligibility&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.checkRequestEligibility.query({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#usercheckrequesteligibility",
    
    "relUrl": "/server-api/methods.html#usercheckrequesteligibility"
  },"126": {
    "doc": "Methods",
    "title": "user.configureBYOK",
    "content": "MUTATIONuser.configureBYOKAuth requiredsrc/trpc/routers/user/index.ts:78 Configure BYOK providers for user (SECURE - API keys stored server-side) Configure BYOK providers for user (SECURE - API keys stored server-side) . 📥Input Parameters ⚡{} . | providers recordrecord | enabled booleandefault | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;providers&quot;: { &quot;type&quot;: &quot;ZodRecord&quot;, &quot;description&quot;: null, &quot;_source&quot;: null }, &quot;enabled&quot;: { &quot;type&quot;: &quot;default&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;hasDefault&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.configureBYOK&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.configureBYOK.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#userconfigurebyok",
    
    "relUrl": "/server-api/methods.html#userconfigurebyok"
  },"127": {
    "doc": "Methods",
    "title": "user.getBYOKStatus",
    "content": "QUERYuser.getBYOKStatusAuth requiredsrc/trpc/routers/user/index.ts:119 Get BYOK configuration status (without exposing API keys) Get BYOK configuration status (without exposing API keys) . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.getBYOKStatus&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.getBYOKStatus.query(); console.log(result); . ",
    "url": "/server-api/methods.html#usergetbyokstatus",
    
    "relUrl": "/server-api/methods.html#usergetbyokstatus"
  },"128": {
    "doc": "Methods",
    "title": "user.getUserProfile",
    "content": "QUERYuser.getUserProfileAuth requiredsrc/trpc/routers/user/index.ts:28 Get user profile with capabilities and preferences (hybrid users) Get user profile with capabilities and preferences (hybrid users) . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.getUserProfile&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.getUserProfile.query(); console.log(result); . ",
    "url": "/server-api/methods.html#usergetuserprofile",
    
    "relUrl": "/server-api/methods.html#usergetuserprofile"
  },"129": {
    "doc": "Methods",
    "title": "user.getUserStatus",
    "content": "QUERYuser.getUserStatusAuth requiredsrc/trpc/routers/user/index.ts:159 Get user status (subscription vs BYOK, purchase history) Get user status (subscription vs BYOK, purchase history) . 📥Input Parameters ⚡{} No structured fields (void) { &quot;type&quot;: &quot;ZodVoid&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;void&quot; } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.getUserStatus&quot;, &quot;params&quot;: {}, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.getUserStatus.query(); console.log(result); . ",
    "url": "/server-api/methods.html#usergetuserstatus",
    
    "relUrl": "/server-api/methods.html#usergetuserstatus"
  },"130": {
    "doc": "Methods",
    "title": "user.updateUserPreferences",
    "content": "MUTATIONuser.updateUserPreferencesAuth requiredsrc/trpc/routers/user/index.ts:51 Update user consumption preferences Update user consumption preferences . 📥Input Parameters ⚡{} . | consumptionOrder arrayoptionalarray | byokEnabled booleanoptional | byokProviders recordoptionalrecord | notifyTokenLowThreshold numberoptional | notifyFallbackToByok booleanoptional | notifyOneTimeConsumed booleanoptional | . { &quot;type&quot;: &quot;ZodObject&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;consumptionOrder&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodArray&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;String&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } } }, &quot;byokEnabled&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;byokProviders&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodRecord&quot;, &quot;description&quot;: null, &quot;_source&quot;: null } }, &quot;notifyTokenLowThreshold&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodNumber&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;number&quot; } }, &quot;notifyFallbackToByok&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } }, &quot;notifyOneTimeConsumed&quot;: { &quot;type&quot;: &quot;ZodOptional&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;optional&quot;: true, &quot;innerType&quot;: { &quot;type&quot;: &quot;ZodBoolean&quot;, &quot;description&quot;: null, &quot;_source&quot;: null, &quot;jsType&quot;: &quot;boolean&quot; } } } } . 📤Response Not documented. Invocation Examples . × cURL . Copy cURL curl -X POST http://localhost:8000/rpc \\ -H &quot;Content-Type: application/json&quot; \\ -d &#39;{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;user.updateUserPreferences&quot;, &quot;params&quot;: { /* ... */ }, &quot;id&quot;: &quot;request-1&quot; }&#39; . tRPC Client . Copy tRPC example const result = await client.user.updateUserPreferences.mutate({ /* ... */ }); console.log(result); . ",
    "url": "/server-api/methods.html#userupdateuserpreferences",
    
    "relUrl": "/server-api/methods.html#userupdateuserpreferences"
  },"131": {
    "doc": "Methods",
    "title": "Methods",
    "content": "Generated from trpc-methods.json. Run pnpm trpc:build then pnpm docs:methods to refresh. Do not edit this page manually – use the generator instead. | ai | mcp | admin | auth | billing | system | user | . ",
    "url": "/server-api/methods.html",
    
    "relUrl": "/server-api/methods.html"
  },"132": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The Simple RPC AI Backend exposes a tRPC-powered API that implements the Model Context Protocol for AI assistants. It provides: . | Unified provider orchestration across Anthropic, OpenAI, Google Gemini, OpenRouter, and custom registries. | MCP tooling and resource access so assistants can browse workspaces, call tools, and retrieve documents. | Production-ready ergonomics including workspace isolation, provider health checks, and registry fallbacks. | . Use the links below to set up the project locally and explore the platform capabilities. | Installation | Quickstart | . ",
    "url": "/getting-started/overview.html",
    
    "relUrl": "/getting-started/overview.html"
  },"133": {
    "doc": "Project Overview",
    "title": "Developer Tooling",
    "content": "The backend ships with a small set of helper UIs that make development and manual testing easier. Add the bundled CLIs to your consumer project for quick access: . // package.json \"scripts\": { \"trpc:build\": \"simple-rpc-gen-methods\", \"dev:panel\": \"simple-rpc-dev-panel --server-port 8000\", \"dev:server\": \"tsx watch src/index.ts\", \"dev\": \"concurrently \\\"pnpm dev:server\\\" \\\"pnpm dev:panel\\\"\", \"build\": \"tsc\" } . Install the helper dev dependency once: pnpm add -D concurrently. Run each command in a separate terminal once your server is listening: . | Tool | Default URL | Purpose | . | Dev Panel (pnpm dev:panel) | http://localhost:8080 | Dashboards for MCP tools, server workspaces, tRPC procedures, and the generated OpenRPC schema. Automatically launches MCP Jam if the optional dependency @mcpjam/inspector is available. | . | tRPC Playground | http://localhost:8080/trpc-playground | Interactive UI (bundled with the dev panel) to issue queries/mutations against /trpc/*. | . | OpenRPC Inspector | https://inspector.open-rpc.org/?url=http://localhost:8000/openrpc.json | Remote viewer for the JSON-RPC schema. Allow its origin in cors.origin (e.g. add https://inspector.open-rpc.org). | . | OpenRPC Playground | https://playground.open-rpc.org/?url=http://localhost:8000/openrpc.json | Interactive request builder for /rpc. Requires the same CORS adjustments as the inspector. | . ℹ️ To skip MCP Jam entirely, install the backend with pnpm install --no-optional (or run pnpm prune --prod --no-optional after install). The dev panel simply omits MCP Jam when the optional dependency is absent. ℹ️ Re-run pnpm trpc:build whenever you change tRPC routers— the dev panel and JSON-RPC schema read from the generated trpc-methods.json and do not watch source files automatically. ℹ️ These CLIs respect AI_SERVER_PORT. Override it (for example AI_SERVER_PORT=9000 pnpm dev:panel) if your API server runs on a non-standard port. Adapt the dev/build scripts to match your app layout (multiple entry points, custom bundlers, etc.). For convenience you can start the API server and dev panel together via pnpm dev (using concurrently). ",
    "url": "/getting-started/overview.html#developer-tooling",
    
    "relUrl": "/getting-started/overview.html#developer-tooling"
  },"134": {
    "doc": "Project Overview",
    "title": "Examples",
    "content": "The GitHub repository includes runnable samples under examples/. They demonstrate how to compose routers, MCP integrations, and authentication flows: . | 01-basic-server – minimal tRPC/JSON-RPC setup. Pair it with the Quickstart for consumers. | 02-mcp-server – full MCP implementation with workspaces and tools. Cross reference Server Workspaces vs MCP Roots and MCP OAuth Authentication. | 04-mcp-tasks-server – showcases long-running MCP tasks and progress updates. See Tools for protocol details. | 05-local-resources-server – demonstrates exposing local files as MCP resources. Combine with Server Workspaces. | . Clone an example, run pnpm install, then start the server with pnpm dev to explore the workflows via the dev panel. ",
    "url": "/getting-started/overview.html#examples",
    
    "relUrl": "/getting-started/overview.html#examples"
  },"135": {
    "doc": "Overview",
    "title": "Server API Overview",
    "content": "The backend exposes a tRPC router and MCP-compatible transport for assistants. Key capabilities include: . | AI Provider Operations – request completion, provider metadata, and billing hints. | Workspace Tools – list, read, write, and manage server workspaces. | Registry Management – query live and fallback model metadata. | Resource Protocols – load content via custom schemes (SMB, SFTP, HTTP, etc.). | . ",
    "url": "/server-api/overview.html#server-api-overview",
    
    "relUrl": "/server-api/overview.html#server-api-overview"
  },"136": {
    "doc": "Overview",
    "title": "HTTP Endpoints",
    "content": "| Endpoint | Description | Enablement | . | POST /mcp | HTTP transport for the Model Context Protocol. MCP clients post tool invocations and resource requests to this endpoint. | Set mcp: { enabled: true } and ensure the HTTP transport is not disabled (transports.http defaults to true). | . | GET /trpc/&lt;procedure&gt; (queries) / POST /trpc/&lt;procedure&gt; (mutations) | Raw tRPC endpoints used by SDK clients and the dev panel. Queries are encoded as GET requests; mutations send a SuperJSON payload with POST. | Enable the protocol with protocols: { tRpc: true } (or via .simplerpcaibackendrc → trpc.protocols.tRpc). | . | POST /rpc | JSON-RPC 2.0 bridge that exposes tRPC procedures for compatibility with OpenRPC tooling. | Leave protocols.jsonRpc at the default (true) or set it explicitly. | . Example requests: . # tRPC immutably encodes the input argument curl 'http://localhost:8000/trpc/system.health?input=%7B%7D' # JSON-RPC bridge curl -X POST http://localhost:8000/rpc \\ -H 'content-type: application/json' \\ -d '{\"jsonrpc\":\"2.0\",\"method\":\"ai.listProviders\",\"params\":{\"provider\":\"anthropic\"},\"id\":1}' . Method Namespaces . The default router ships with these namespaces (all available under both /trpc and /rpc): . | ai.* – model management, text generation, provider metadata. | mcp.* – MCP tool catalogues and resource helpers. | system.* – server workspace utilities and filesystem helpers. | admin.* – health checks, status pages, configuration diagnostics. | auth.* – OAuth and API-key helpers. | billing.* – usage analytics and virtual token APIs. | user.* – BYOK management and user profile settings. | . A complete list of procedures, grouped by namespace, is available inside the dev panel and in the generated Methods reference. Review the sections below for implementation details and integration examples: . | Resources | Tools | Registry | Methods | . ",
    "url": "/server-api/overview.html#http-endpoints",
    
    "relUrl": "/server-api/overview.html#http-endpoints"
  },"137": {
    "doc": "Overview",
    "title": "Overview",
    "content": " ",
    "url": "/server-api/overview.html",
    
    "relUrl": "/server-api/overview.html"
  },"138": {
    "doc": "Quickstart",
    "title": "Quickstart",
    "content": "Launch the backend inside your own project and explore the MCP tools in minutes. This guide is for package consumers who install simple-rpc-ai-backend from npm. If you are contributing to the repository itself, see the installation guide. ",
    "url": "/getting-started/quickstart.html",
    
    "relUrl": "/getting-started/quickstart.html"
  },"139": {
    "doc": "Quickstart",
    "title": "1. Install the Package",
    "content": "pnpm add simple-rpc-ai-backend . 🛠️ Need a project scaffold? Create a TypeScript workspace (for example with pnpm create vite my-app --template vanilla-ts) and run the command above inside that folder. ",
    "url": "/getting-started/quickstart.html#1-install-the-package",
    
    "relUrl": "/getting-started/quickstart.html#1-install-the-package"
  },"140": {
    "doc": "Quickstart",
    "title": "2. Add Dev Tooling Scripts",
    "content": "Update your consumer package.json with helper commands that ship with the backend: . // package.json \"scripts\": { \"trpc:build\": \"simple-rpc-gen-methods\", \"dev:panel\": \"simple-rpc-dev-panel --server-port 8000\", \"dev:server\": \"tsx watch src/index.ts\", \"dev\": \"concurrently \\\"pnpm dev:server\\\" \\\"pnpm dev:panel\\\"\", \"build\": \"tsc\" } . Install the helper dev dependency once: pnpm add -D concurrently. Run pnpm trpc:build whenever you add or rename tRPC routers—this regenerates trpc-methods.json, which powers the dev panel and JSON-RPC schema. The panel automatically launches MCP Jam when @mcpjam/inspector is present. If you prefer to omit MCP Jam, install with pnpm install --no-optional or prune after installation via pnpm prune --prod --no-optional. Tailor the dev/build scripts (or the optional dev composite script) as needed (e.g. different entry points, bundlers, or framework builds); the optional dev script uses concurrently to start the API server and dev panel together. ",
    "url": "/getting-started/quickstart.html#2-add-dev-tooling-scripts",
    
    "relUrl": "/getting-started/quickstart.html#2-add-dev-tooling-scripts"
  },"141": {
    "doc": "Quickstart",
    "title": "3. Configure Environment Variables",
    "content": "Create a .env file with provider keys and the server port: . SERVER_PORT=8000 ANTHROPIC_API_KEY=sk-ant-... OPENAI_API_KEY=sk-openai-... Other useful variables: . | AI_SERVICE_PROVIDERS – enables provider-backed API keys handled by the server. | AI_BYOK_PROVIDERS – providers that expect user-supplied keys at runtime. | . ",
    "url": "/getting-started/quickstart.html#3-configure-environment-variables",
    
    "relUrl": "/getting-started/quickstart.html#3-configure-environment-variables"
  },"142": {
    "doc": "Quickstart",
    "title": "4. Bootstrap the Server",
    "content": "Create a file such as src/server.ts: . import { createRpcAiServer, router, publicProcedure } from 'simple-rpc-ai-backend'; import { z } from 'zod'; const mathRouter = router({ add: publicProcedure .input(z.object({ a: z.number(), b: z.number() })) .mutation(({ input }) =&gt; ({ result: input.a + input.b })), multiply: publicProcedure .input(z.object({ a: z.number(), b: z.number() })) .mutation(({ input }) =&gt; ({ result: input.a * input.b })) }); const utilsRouter = router({ ping: publicProcedure.query(() =&gt; ({ pong: true })), echo: publicProcedure .input(z.object({ message: z.string() })) .mutation(({ input }) =&gt; ({ message: input.message })) }); const customRouter = router({ // Add domain-specific procedures here }); const server = createRpcAiServer({ port: Number(process.env.SERVER_PORT ?? 8000), ai: { providers: { anthropic: { apiKey: process.env.ANTHROPIC_API_KEY }, openai: { apiKey: process.env.OPENAI_API_KEY } } }, mcp: { enabled: true }, customRouters: { math: mathRouter, utils: utilsRouter, custom: customRouter } }); await server.start(); . Re-run pnpm trpc:build after editing these routers so the dev panel and JSON-RPC schema stay in sync. Run it with your preferred runtime (tsx, ts-node, or compiled JavaScript). For example: . pnpm tsx src/server.ts . You should see log output confirming workspace registration, provider availability, and tRPC endpoints. In day-to-day development you’ll usually run pnpm dev (which boots both the API server and the dev panel via concurrently). If you prefer separate terminals, run pnpm dev:server and pnpm dev:panel individually. ",
    "url": "/getting-started/quickstart.html#4-bootstrap-the-server",
    
    "relUrl": "/getting-started/quickstart.html#4-bootstrap-the-server"
  },"143": {
    "doc": "Quickstart",
    "title": "5. Recommended Project Layout",
    "content": "Place custom routers under src/trpc/routers/&lt;namespace&gt;/index.ts so that the generator and dev panel can discover them automatically: . src/ server.ts # createRpcAiServer entry point trpc/ root.ts routers/ math/index.ts utils/index.ts custom/index.ts # additional namespaces as needed . Wire them into createRpcAiServer({ customRouters: { math: mathRouter, utils: utilsRouter, custom: customRouter } }) and re-run pnpm trpc:build so the dev panel sees the new procedures. ",
    "url": "/getting-started/quickstart.html#5-recommended-project-layout",
    
    "relUrl": "/getting-started/quickstart.html#5-recommended-project-layout"
  },"144": {
    "doc": "Quickstart",
    "title": "6. Explore the Server",
    "content": "Visit http://localhost:8080 after running pnpm dev (or pnpm dev:panel plus pnpm dev:server). The dev panel lets you: . | Inspect available tRPC namespaces (math, utils, and any custom routers you register). | Browse MCP tools and resources when mcp.enabled is true. | Follow quick links to the bundled tRPC Playground and the MCP Jam inspector. | . Keep a terminal open with pnpm trpc:build whenever you change router definitions so the UI reflects the latest procedures. External clients (VS Code MCP extension, Claude Desktop, etc.) can still connect to the server URL from the logs to exercise the same tools. For Contributors / Maintainers . If you are developing the backend itself, use the repository workflow (clone, pnpm install, etc.) described in the Installation page. The Git URL pnpm add git+https://github.com/AWolf81/simple-rpc-ai-backend.git is intended for package developers only; consumers should stick to the npm version. ",
    "url": "/getting-started/quickstart.html#6-explore-the-server",
    
    "relUrl": "/getting-started/quickstart.html#6-explore-the-server"
  },"145": {
    "doc": "Registry",
    "title": "Provider Registry",
    "content": "The Simple RPC AI Backend integrates with @anolilab/ai-model-registry to deliver curated provider and model metadata with resilient fallbacks. ",
    "url": "/server-api/registry.html#provider-registry",
    
    "relUrl": "/server-api/registry.html#provider-registry"
  },"146": {
    "doc": "Registry",
    "title": "Architecture",
    "content": ". | External Registry Package – ships curated provider/model metadata via @anolilab/ai-model-registry. | ProviderRegistryService – filters providers, applies overrides, and exposes metadata via tRPC. | Fallback Data – ensures availability when the external registry package cannot be resolved. | . ",
    "url": "/server-api/registry.html#architecture",
    
    "relUrl": "/server-api/registry.html#architecture"
  },"147": {
    "doc": "Registry",
    "title": "Quick Start",
    "content": "pnpm install # Registry data is available immediately with sensible defaults . Programmatic Usage . import { ProviderRegistryService } from 'simple-rpc-ai-backend'; const registry = new ProviderRegistryService( ['anthropic', 'openai'], ['anthropic', 'openai', 'custom-ai'], ['free'] ); . ",
    "url": "/server-api/registry.html#quick-start",
    
    "relUrl": "/server-api/registry.html#quick-start"
  },"148": {
    "doc": "Registry",
    "title": "tRPC Methods",
    "content": ". | ai.listProviders – service-managed providers with metadata and pricing. | ai.listProvidersBYOK – BYOK providers that expect user-supplied keys. | . const { providers, source } = await client.ai.listProviders.query(); . ",
    "url": "/server-api/registry.html#trpc-methods",
    
    "relUrl": "/server-api/registry.html#trpc-methods"
  },"149": {
    "doc": "Registry",
    "title": "Configuration",
    "content": "export AI_SERVICE_PROVIDERS=anthropic,openai,google export AI_BYOK_PROVIDERS=anthropic,openai,google,custom-ai . ",
    "url": "/server-api/registry.html#configuration",
    
    "relUrl": "/server-api/registry.html#configuration"
  },"150": {
    "doc": "Registry",
    "title": "Pricing Overrides",
    "content": "registry.addPricingOverride({ provider: 'openai', model: 'gpt-4o', pricing: { input: 2.5, output: 10 }, reason: 'Enterprise contract pricing' }); . Apply provider-level overrides by omitting the model property. ",
    "url": "/server-api/registry.html#pricing-overrides",
    
    "relUrl": "/server-api/registry.html#pricing-overrides"
  },"151": {
    "doc": "Registry",
    "title": "Monitoring &amp; Resilience",
    "content": "The service relies on @anolilab/ai-model-registry at runtime. When the library is unavailable the backend serves the bundled fallback metadata and getHealthStatus() returns status: 'unhealthy' with the error message from the import. Hook that method into your own health endpoint or scheduler if you need alerts when the live registry is unreachable. Because data is loaded directly from the package there is no explicit cache directory to manage; customize pricing or model entries through addPricingOverride / addModelOverride as shown above. ",
    "url": "/server-api/registry.html#monitoring--resilience",
    
    "relUrl": "/server-api/registry.html#monitoring--resilience"
  },"152": {
    "doc": "Registry",
    "title": "Registry",
    "content": " ",
    "url": "/server-api/registry.html",
    
    "relUrl": "/server-api/registry.html"
  },"153": {
    "doc": "Resources",
    "title": "Resource Protocols",
    "content": "Extend the backend with custom resource handlers so MCP clients can read files over non-standard transports. ",
    "url": "/server-api/resources.html#resource-protocols",
    
    "relUrl": "/server-api/resources.html#resource-protocols"
  },"154": {
    "doc": "Resources",
    "title": "Architecture",
    "content": "registerProtocolHandler(protocol, handler, matcher); addFileResource(id, name, filePath, options); . | The server checks registered protocol handlers before default file I/O. | Matching handlers fetch content using provider-specific logic. | If no handler matches, local filesystem access is used. | . ",
    "url": "/server-api/resources.html#architecture",
    
    "relUrl": "/server-api/resources.html#architecture"
  },"155": {
    "doc": "Resources",
    "title": "Register a Protocol Handler",
    "content": "import { registerProtocolHandler } from 'simple-rpc-ai-backend'; registerProtocolHandler( 'protocol-name', async (filePath) =&gt; { // custom read logic return fileContent; }, (path) =&gt; boolean ); . ",
    "url": "/server-api/resources.html#register-a-protocol-handler",
    
    "relUrl": "/server-api/resources.html#register-a-protocol-handler"
  },"156": {
    "doc": "Resources",
    "title": "Use the Handler with Resources",
    "content": "addFileResource('resource-id', 'Display Name', 'protocol://server/path/file.txt', { description: 'Resource served over custom protocol', category: 'network' }); . ",
    "url": "/server-api/resources.html#use-the-handler-with-resources",
    
    "relUrl": "/server-api/resources.html#use-the-handler-with-resources"
  },"157": {
    "doc": "Resources",
    "title": "Protocol Examples",
    "content": "SMB . import SMB2 from '@marsaud/smb2'; import { registerProtocolHandler } from 'simple-rpc-ai-backend'; registerProtocolHandler('smb', async (filePath) =&gt; { const url = new URL(filePath); const [, share, ...pathParts] = url.pathname.split('/'); const smb2Client = new SMB2({ share: `\\\\\\\\${url.hostname}\\\\${share}`, domain: process.env.SMB_DOMAIN ?? 'WORKGROUP', username: process.env.SMB_USERNAME, password: process.env.SMB_PASSWORD }); try { const content = await smb2Client.readFile(pathParts.join('/'), 'utf8'); await smb2Client.disconnect(); return content; } catch (error) { await smb2Client.disconnect(); throw new Error(`SMB read failed: ${error.message}`); } }, (path) =&gt; path.startsWith('smb://')); . SFTP . import Client from 'ssh2-sftp-client'; registerProtocolHandler('sftp', async (filePath) =&gt; { const url = new URL(filePath); const sftp = new Client(); try { await sftp.connect({ host: url.hostname, port: Number(url.port || 22), username: url.username || process.env.SFTP_USERNAME, password: process.env.SFTP_PASSWORD, privateKey: process.env.SFTP_PRIVATE_KEY ? require('fs').readFileSync(process.env.SFTP_PRIVATE_KEY) : undefined }); return await sftp.get(url.pathname, null, 'utf8'); } finally { await sftp.end(); } }, (path) =&gt; path.startsWith('sftp://')); . HTTP/HTTPS . registerProtocolHandler('http', async (filePath) =&gt; { const response = await fetch(filePath, { headers: { 'User-Agent': 'Simple-RPC-AI-Backend/1.0', Authorization: process.env.HTTP_AUTH_HEADER } }); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } return await response.text(); }, (path) =&gt; path.startsWith('http://') || path.startsWith('https://')); . ",
    "url": "/server-api/resources.html#protocol-examples",
    
    "relUrl": "/server-api/resources.html#protocol-examples"
  },"158": {
    "doc": "Resources",
    "title": "Security Considerations",
    "content": ". | Validate hostnames and paths before making network calls. | Store protocol credentials (SMB, SFTP) in secure secrets management. | Handle timeouts and retries gracefully to avoid blocking tool calls. | Log access attempts for auditing without exposing sensitive data. | . ",
    "url": "/server-api/resources.html#security-considerations",
    
    "relUrl": "/server-api/resources.html#security-considerations"
  },"159": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "/server-api/resources.html",
    
    "relUrl": "/server-api/resources.html"
  },"160": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Server Workspaces vs MCP Roots: Complete Guide",
    "content": " ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#server-workspaces-vs-mcp-roots-complete-guide",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#server-workspaces-vs-mcp-roots-complete-guide"
  },"161": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Overview",
    "content": "This guide explains the fundamental distinction between Server Workspaces (server-managed file access) and MCP Roots (client-managed file exposure) in the Simple RPC AI Backend. Understanding this separation is crucial for proper MCP protocol compliance and secure file access patterns. ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#overview",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#overview"
  },"162": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Table of Contents",
    "content": ". | Architecture Overview | Server Workspaces (Server-Managed) | MCP Roots (Client-Managed) | Configuration Examples | Security Considerations | Troubleshooting | . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#table-of-contents",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#table-of-contents"
  },"163": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Architecture Overview",
    "content": "flowchart TD subgraph Client clientRoots[Client-managed directories&lt;br/&gt;e.g. ~/projects,&lt;br/&gt;/mnt/shared] end subgraph Server rpcServer((tRPC / MCP Server)) serverWorkspaces[Server Workspaces&lt;br/&gt;Configured via serverWorkspaces] end rpcServer -- \"roots/list\" --&gt; clientRoots clientRoots -- \"registerClientWorkspace\" --&gt; rpcServer rpcServer -- \"listFiles / readFile / writeFile\" --&gt; serverWorkspaces . The direction of each arrow mirrors who initiates the call: the server invokes roots/list on the client to discover exposed directories, while the client calls registerClientWorkspace on the server to grant access to its folders. 🔑 Key Differences . | Aspect | Server Workspaces | MCP Roots | . | Owner | Server | Client | . | Configuration | Server config file | Client capability + registration | . | Purpose | Server resources &amp; templates | User workspace folders | . | Access Control | Server administrator | End user | . | MCP Protocol | Not part of MCP roots/list | Part of MCP roots/list | . | Tools | getServerWorkspaces, listFiles | registerClientWorkspace, roots/list | . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#architecture-overview",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#architecture-overview"
  },"164": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Server Workspaces (Server-Managed)",
    "content": "Server Workspaces are directories that the server administrator configures to provide access to server-controlled resources. 🎯 Use Cases . | Templates &amp; Examples: /opt/templates, /usr/share/examples | Reference Data: /srv/data, /var/app-data | Shared Resources: /shared/docs, /company/policies | Server Projects: /home/server/projects | . ⚙️ Configuration . const server = createRpcAiServer({ // Server-managed directories (not MCP roots) serverWorkspaces: { enabled: true, // Enable workspace tools additionalWorkspaces: { templates: { path: '/opt/templates', name: 'Server Templates', description: 'Pre-built project templates', readOnly: true, allowedExtensions: ['.js', '.ts', '.json', '.md'] }, sharedDocs: { path: '/shared/documentation', name: 'Shared Documentation', description: 'Company-wide documentation', readOnly: true }, workArea: { path: '/tmp/workspace', name: 'Temporary Work Area', description: 'Temporary file operations', readOnly: false, maxFileSize: 10485760 // 10MB limit } } } }); . 🛠️ Available Tools . When serverWorkspaces is configured, these tRPC/MCP tools become available: . | getServerWorkspaces: List all configured server workspaces | listFiles: List files in a server workspace | readFile: Read file content from a server workspace | writeFile: Write files to a server workspace (if not readOnly) | pathExists: Check if a path exists in a server workspace | addServerWorkspace: Dynamically add new server workspaces | removeServerWorkspace: Remove server workspaces | . 🔐 Security Features . serverWorkspaces: { myWorkspace: { path: '/safe/directory', readOnly: false, // Path restrictions allowedPaths: ['docs/*', 'src/**/*.js'], // Only these patterns blockedPaths: ['**/node_modules', '**/.git'], // Never these patterns // File restrictions allowedExtensions: ['.js', '.ts', '.md'], // Only these file types blockedExtensions: ['.exe', '.sh'], // Never these file types maxFileSize: 1048576, // 1MB file size limit // Symlink handling followSymlinks: false, // Don't follow symlinks (security) // File watching enableWatching: true // Watch for file changes } } . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#server-workspaces-server-managed",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#server-workspaces-server-managed"
  },"165": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "MCP Roots (Client-Managed)",
    "content": "MCP Roots are directories that the client/user exposes to the server through the Model Context Protocol. 🎯 Use Cases . | IDE Workspaces: VS Code workspace folders | Project Directories: User’s active development projects | Document Folders: User’s personal documents | Custom Locations: Any folder the user wants to share | . 🔗 MCP Protocol Flow . sequenceDiagram participant Client participant Server Note over Client,Server: 1. Capability Negotiation Client-&gt;&gt;Server: initialize(capabilities: {roots: {listChanged: true}}) Server-&gt;&gt;Client: initialize_response(capabilities: {...}) Note over Client,Server: 2. Root Discovery Server-&gt;&gt;Client: roots/list Client-&gt;&gt;Server: roots/list_response([{uri: \"file:///path\", name: \"Project\"}]) Note over Client,Server: 3. Change Notifications Client-&gt;&gt;Server: notifications/roots/list_changed Server-&gt;&gt;Client: (no response - notification only) . 🛠️ Available Tools . For MCP client roots, these tools are available: . | registerClientWorkspace: Register a client workspace with the server | unregisterClientWorkspace: Remove a registered client workspace | listClientWorkspaces: List all registered client workspaces | roots/list (MCP protocol): Server queries client for exposed roots | . 📋 Client Root Registration . // Client can register their workspace folders await client.registerClientWorkspace({ id: 'my-project', uri: 'file:///home/user/projects/my-project', name: 'My Project', description: 'Active development project' }); . 🔌 Tool Integration Example . Combine server workspaces with MCP tools and custom routers. The snippet below mirrors the structure in examples/02-mcp-server/server.js, exposing two namespaces (workspace and utility) through customRouters while still benefiting from automatic MCP discovery: . import { router, publicProcedure, createRpcAiServer } from 'simple-rpc-ai-backend'; import { z } from 'zod'; // Workspace-related procedures const workspaceRouter = router({ readFile: publicProcedure .input(z.object({ path: z.string() })) .query(async ({ input }) =&gt; { // Wrap MCP file read logic here return readWorkspaceFile(input.path); }), writeFile: publicProcedure .input(z.object({ path: z.string(), contents: z.string() })) .mutation(async ({ input }) =&gt; { await writeWorkspaceFile(input.path, input.contents); return { success: true }; }) }); // Utility procedures (AI helpers, prompts, etc.) const utilityRouter = router({ summarize: publicProcedure .input(z.object({ text: z.string() })) .mutation(async ({ input }) =&gt; summarizeText(input.text)), listTools: publicProcedure.query(() =&gt; ({ workspace: ['readFile', 'writeFile'], utility: ['summarize'] })) }); const app = createRpcAiServer({ serverWorkspaces: { docs: { path: '/opt/docs', readOnly: true }, sandbox: { path: '/tmp/sandbox', readOnly: false } }, customRouters: { workspace: workspaceRouter, utility: utilityRouter } }); await app.start(); . 🔐 Client Security . According to MCP specification, clients MUST: . | Only expose roots with appropriate permissions | Validate all root URIs to prevent path traversal | Implement proper access controls | Monitor root accessibility | Prompt users for consent before exposing roots to servers | . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#mcp-roots-client-managed",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#mcp-roots-client-managed"
  },"166": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Configuration Examples",
    "content": "Basic Server Setup . import { createRpcAiServer } from 'simple-rpc-ai-backend'; const server = createRpcAiServer({ ai: { providers: { anthropic: { apiKey: process.env.ANTHROPIC_API_KEY } } }, // Server-managed directories serverWorkspaces: { templates: { path: './templates', name: 'Project Templates', readOnly: true }, work: { path: './workspace', name: 'Work Area', readOnly: false } }, // MCP configuration for client roots mcp: { enableMCP: true, auth: { requireAuthForToolsList: false, requireAuthForToolsCall: false } } }); await server.start(); . Production Security Setup . const server = createRpcAiServer({ // Restricted server workspaces serverWorkspaces: { enabled: true, additionalWorkspaces: { publicTemplates: { path: '/opt/secure-templates', name: 'Approved Templates', readOnly: true, allowedExtensions: ['.md', '.json', '.js'], maxFileSize: 1048576 // 1MB }, userScratch: { path: '/tmp/user-workspace', name: 'User Scratch Area', readOnly: false, allowedPaths: ['**/*.txt', '**/*.md'], blockedPaths: ['**/*.exe', '**/*.sh'], maxFileSize: 5242880 // 5MB } } }, // Secure MCP configuration mcp: { enableMCP: true, auth: { requireAuthForToolsList: true, // Require auth requireAuthForToolsCall: true, // Require auth publicTools: [] // No public tools } } }); . Development Setup with Both . const server = createRpcAiServer({ // Development server workspaces serverWorkspaces: { enabled: true, additionalWorkspaces: { examples: { path: './examples', name: 'Code Examples', readOnly: true }, playground: { path: './playground', name: 'Development Playground', readOnly: false, enableWatching: true } } }, // Liberal MCP settings for development mcp: { enableMCP: true, auth: { requireAuthForToolsList: false, requireAuthForToolsCall: false, publicTools: [ 'getServerWorkspaces', 'listFiles', 'readFile', 'registerClientWorkspace' ] } } }); . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#configuration-examples",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#configuration-examples"
  },"167": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Security Considerations",
    "content": "🛡️ Server Workspace Security . Server administrators must consider: . | Path Traversal Protection serverWorkspaces: { restricted: { path: '/safe/directory', // Prevent access outside this directory allowedPaths: ['**/*'], // Only within this workspace blockedPaths: ['../**'] // Block parent directory access } } . | File Type Restrictions serverWorkspaces: { documents: { path: './docs', allowedExtensions: ['.md', '.txt', '.json'], blockedExtensions: ['.exe', '.sh', '.bat'] // Block executables } } . | Size Limits serverWorkspaces: { uploads: { path: './uploads', maxFileSize: 10485760 // 10MB per file } } . | . 🔒 MCP Root Security . Clients should implement: . | User Consent: Always prompt before exposing directories | Path Validation: Validate URIs to prevent malicious paths | Permission Checks: Verify read/write permissions | Monitoring: Watch for unauthorized access attempts | . 🚨 Common Security Mistakes . ❌ DON’T DO THIS: . // WRONG: Exposing system directories serverWorkspaces: { system: { path: '/', // ❌ Root filesystem access readOnly: false // ❌ Write access to system } } // WRONG: No restrictions serverWorkspaces: { anything: { path: '/home/user', // ❌ No file type restrictions // ❌ No size limits // ❌ No path restrictions } } . ✅ DO THIS: . // CORRECT: Restricted access serverWorkspaces: { userDocuments: { path: '/home/user/documents', readOnly: true, // ✅ Read-only allowedExtensions: ['.md', '.txt'], // ✅ Limited file types maxFileSize: 1048576, // ✅ Size limit allowedPaths: ['**/*.md', '**/*.txt'], // ✅ Path restrictions followSymlinks: false // ✅ No symlink following } } . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#security-considerations",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#security-considerations"
  },"168": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Troubleshooting",
    "content": "Common Issues . | “No workspaces available” error // Problem: serverWorkspaces not configured const server = createRpcAiServer({ // Missing serverWorkspaces configuration }); // Solution: Add serverWorkspaces const server = createRpcAiServer({ serverWorkspaces: { work: { path: './workspace', name: 'Work Area' } } }); . | “Access denied” errors // Problem: Restrictive path/extension rules serverWorkspaces: { docs: { path: './docs', allowedExtensions: ['.md'], // Only .md files allowed readOnly: true // No write access } } // Solution: Adjust restrictions as needed . | MCP roots not working // Problem: Client doesn't support roots capability // Check client initialization: { \"method\": \"initialize\", \"params\": { \"capabilities\": { \"roots\": { \"listChanged\": true // ← Must be present } } } } . | . Debugging . Enable debug logging: . const server = createRpcAiServer({ monitoring: { logging: { level: 'debug' // Enable debug logs } } }); . Look for these log messages: . | 🗂️ MCP roots/list: Client supports roots capability | 📋 Server workspace registered: workspaceId | 🔍 MCP Initialize: clientSupportsRoots: true | . Testing Configuration . Test your workspace configuration: . # Test server workspace access curl -X POST http://localhost:8001/trpc/system.getServerWorkspaces # Test MCP roots capability curl -X POST http://localhost:8001/mcp \\ -H \"Content-Type: application/json\" \\ -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"roots/list\"}' . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#troubleshooting",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#troubleshooting"
  },"169": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Best Practices",
    "content": "🎯 Server Workspace Best Practices . | Principle of Least Privilege: Only expose necessary directories | Read-Only by Default: Use readOnly: true unless write access is required | File Type Restrictions: Always specify allowedExtensions | Size Limits: Set reasonable maxFileSize limits | Path Validation: Use allowedPaths and blockedPaths | . 🎯 MCP Root Best Practices . | User Consent: Always get explicit user permission | Capability Declaration: Properly declare roots capability | Change Notifications: Send notifications/roots/list_changed when roots change | Error Handling: Handle cases where roots become unavailable | . 🎯 Security Best Practices . | Defense in Depth: Use multiple security layers | Input Validation: Validate all file paths and names | Monitoring: Log all file operations | Regular Audits: Review workspace configurations regularly | Update Promptly: Keep dependencies updated | . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#best-practices",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#best-practices"
  },"170": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Reference",
    "content": ". | MCP Specification: Model Context Protocol - Roots | Server Workspace Types: See ServerWorkspaceConfig in src/services/workspace-manager.ts | MCP Tools: See system router in src/trpc/routers/system/index.ts | Configuration Types: See RpcAiServerConfig in src/rpc-ai-server.ts | . Next Steps: . | Review your current configuration against security best practices | Test both server workspaces and MCP root functionality | Set up monitoring and logging for file operations | Consider implementing user authentication for sensitive workspaces | . ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html#reference",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html#reference"
  },"171": {
    "doc": "Server Workspaces vs MCP Roots",
    "title": "Server Workspaces vs MCP Roots",
    "content": " ",
    "url": "/common-configurations/server-workspaces-vs-mcp-roots.html",
    
    "relUrl": "/common-configurations/server-workspaces-vs-mcp-roots.html"
  },"172": {
    "doc": "Testing tRPC Procedures",
    "title": "Testing tRPC Procedures",
    "content": "This guide explains the recommended approach for testing tRPC procedures in this project using the createCaller pattern. ",
    "url": "/tips-and-tricks/testing-trpc.html",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html"
  },"173": {
    "doc": "Testing tRPC Procedures",
    "title": "Overview",
    "content": "Instead of spinning up an HTTP server and making requests with supertest, we test tRPC procedures directly using the createCaller pattern. This approach is: . | ✅ Faster – no HTTP overhead, no server startup time | ✅ Type-safe – full TypeScript inference from AppRouter | ✅ Isolated – no port conflicts or network plumbing | ✅ Predictable – fewer race conditions and async server issues | ✅ Mockable – direct control over context (user, apiKey, etc.) | . ",
    "url": "/tips-and-tricks/testing-trpc.html#overview",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#overview"
  },"174": {
    "doc": "Testing tRPC Procedures",
    "title": "Basic Pattern",
    "content": "import { describe, it, expect, beforeAll } from 'vitest'; import { createRpcAiServer } from '../src/rpc-ai-server'; import type { AppRouter } from '../src/trpc/root'; describe('My Feature', () =&gt; { let server: ReturnType&lt;typeof createRpcAiServer&gt;; let caller: ReturnType&lt;AppRouter['createCaller']&gt;; beforeAll(async () =&gt; { server = createRpcAiServer({ port: 0, protocols: { jsonRpc: true, tRpc: true } }); const mockContext = { user: null, apiKey: undefined, req: undefined, res: undefined }; caller = server.getRouter().createCaller(mockContext); }); it('should work', async () =&gt; { const result = await caller.system.health(); expect(result.status).toBe('healthy'); }); }); . ",
    "url": "/tips-and-tricks/testing-trpc.html#basic-pattern",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#basic-pattern"
  },"175": {
    "doc": "Testing tRPC Procedures",
    "title": "Using Context Helpers",
    "content": "Use the helpers in test/utils/trpc-context.ts to keep tests concise: . import { createContextInner, createTestCaller } from '../test/utils/trpc-context'; const ctx = await createContextInner({}); const caller = server.getRouter().createCaller(ctx); const { caller: withUser } = await createTestCaller(server, { user: { id: '123', email: 'test@example.com' } }); . ",
    "url": "/tips-and-tricks/testing-trpc.html#using-context-helpers",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#using-context-helpers"
  },"176": {
    "doc": "Testing tRPC Procedures",
    "title": "Testing Different Scenarios",
    "content": "Anonymous User (No Authentication) . await expect(async () =&gt; { const ctx = await createContextInner({}); const caller = server.getRouter().createCaller(ctx); await caller.ai.generateText({ content: 'Hello', systemPrompt: 'You are helpful' }); }).rejects.toThrow(/API key/i); . Authenticated User . const ctx = await createContextInner({ user: { id: '123', email: 'test@example.com' } }); const caller = server.getRouter().createCaller(ctx); const result = await caller.user.getCurrentUser(); expect(result.user.email).toBe('test@example.com'); . BYOK (Bring Your Own Key) . const ctx = await createContextInner({ apiKey: 'sk-test-key-12345' }); const caller = server.getRouter().createCaller(ctx); const result = await caller.ai.generateText({ content: 'Hello', systemPrompt: 'You are helpful' }); expect(result.success).toBe(true); . ",
    "url": "/tips-and-tricks/testing-trpc.html#testing-different-scenarios",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#testing-different-scenarios"
  },"177": {
    "doc": "Testing tRPC Procedures",
    "title": "Mocking External Dependencies",
    "content": "Use Vitest mocks to isolate third-party APIs: . vi.mock('@ai-sdk/anthropic', () =&gt; ({ createClient: () =&gt; ({ generateText: vi.fn().mockResolvedValue({ text: 'mocked' }) }) })); . ",
    "url": "/tips-and-tricks/testing-trpc.html#mocking-external-dependencies",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#mocking-external-dependencies"
  },"178": {
    "doc": "Testing tRPC Procedures",
    "title": "Integration Tests",
    "content": "If you still want to exercise the HTTP stack, spin up the server in beforeAll with a random port: . beforeAll(async () =&gt; { server = createRpcAiServer({ port: 0 }); await server.start(); }); afterAll(async () =&gt; { await server.stop(); }); . Then use fetch or supertest against server.getHttpAddress(). ",
    "url": "/tips-and-tricks/testing-trpc.html#integration-tests",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#integration-tests"
  },"179": {
    "doc": "Testing tRPC Procedures",
    "title": "Summary",
    "content": ". | Prefer createCaller for most tests: fast, typed, deterministic. | Mock context to simulate authentication or API keys. | Only start the HTTP server when validating transport-level behaviour. | . ",
    "url": "/tips-and-tricks/testing-trpc.html#summary",
    
    "relUrl": "/tips-and-tricks/testing-trpc.html#summary"
  },"180": {
    "doc": "Tools",
    "title": "Tool Integration",
    "content": "The recommended way to expose AI tooling is through the bundled tRPC routers. They keep system prompts on the server, automatically bridge to JSON-RPC for MCP clients, and give you full control over authentication and billing. ",
    "url": "/server-api/tools.html#tool-integration",
    
    "relUrl": "/server-api/tools.html#tool-integration"
  },"181": {
    "doc": "Tools",
    "title": "Use the AI Router in a Custom Server",
    "content": "The quickest path is to reuse the exported createAppRouter helper. It wires up the AI router, MCP router, and supporting services so you can mount everything under a single namespace. import { createAppRouter } from 'simple-rpc-ai-backend'; export const appRouter = createAppRouter( { config: { tokens: { defaultMaxTokens: 4096 }, systemPrompt: { maxLength: 25_000 } } }, /* tokenTrackingEnabled */ false, /* dbAdapter */ undefined, /* serverProviders */ ['anthropic', 'openai'], /* byokProviders */ ['anthropic', 'openai', 'google'] ); . Client code can then call the generated procedures through tRPC: . const result = await trpc.ai.generateText.mutate({ content: sourceCode, systemPrompt: 'security_review', metadata: { name: 'VS Code extension' } }); . Behind the scenes the router routes requests through AIService.execute, enforces rate limits, tracks token balances, and decides whether to use managed credentials or BYOK keys. ",
    "url": "/server-api/tools.html#use-the-ai-router-in-a-custom-server",
    
    "relUrl": "/server-api/tools.html#use-the-ai-router-in-a-custom-server"
  },"182": {
    "doc": "Tools",
    "title": "Sampling Workflows for MCP",
    "content": "When you enable MCP tooling, the mcp router publishes sampling procedures such as generateWithApproval. They wrap the same AI router so you get consistent behaviour while letting MCP clients handle multi-step approvals. import { createRpcAiServer } from 'simple-rpc-ai-backend'; const mcpServer = createRpcAiServer({ mcp: { enabled: true, ai: { enabled: true, restrictToSampling: true } } }); . MCP-compatible clients then call mcp.generateWithApproval to trigger the sampling protocol. The router handles message construction, approval loops, and finally calls the shared AI router via aiService.execute. ",
    "url": "/server-api/tools.html#sampling-workflows-for-mcp",
    
    "relUrl": "/server-api/tools.html#sampling-workflows-for-mcp"
  },"183": {
    "doc": "Tools",
    "title": "Provider-Native Web Search",
    "content": "Switch between MCP tools and provider-native web search by setting the webSearchPreference metadata when calling ai.generateText: . await trpc.ai.generateText.mutate({ content: 'Summarise the latest MCP updates', systemPrompt: 'research_assistant', metadata: { type: 'research', webSearchPreference: 'ai-web-search' // or 'mcp' }, options: { model: 'gpt-4o', maxTokens: 1024 } }); . | 'mcp' uses registered MCP tools such as web_search and registryLookup. | 'ai-web-search' tells the providers (Anthropic, OpenAI, Google, OpenRouter) to use their own browsing APIs. | . ",
    "url": "/server-api/tools.html#provider-native-web-search",
    
    "relUrl": "/server-api/tools.html#provider-native-web-search"
  },"184": {
    "doc": "Tools",
    "title": "Best Practices",
    "content": ". | Expose only the tRPC procedures you need—MCP and JSON-RPC inherit them automatically. | Group tool-specific scopes and rate limits around the router rather than instantiating AIService directly. | Prefer metadata-driven behaviour (e.g., webSearchPreference, provider) so clients can experiment without server redeploys. | Keep provider allowlists in AI_SERVICE_PROVIDERS/AI_BYOK_PROVIDERS so the router enforces business rules consistently. | . ",
    "url": "/server-api/tools.html#best-practices",
    
    "relUrl": "/server-api/tools.html#best-practices"
  },"185": {
    "doc": "Tools",
    "title": "Tools",
    "content": " ",
    "url": "/server-api/tools.html",
    
    "relUrl": "/server-api/tools.html"
  },"186": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "Solutions to the most common setup and runtime problems. ",
    "url": "/common-issues/troubleshooting.html",
    
    "relUrl": "/common-issues/troubleshooting.html"
  },"187": {
    "doc": "Troubleshooting",
    "title": "Installation Failures",
    "content": "Python distutils Missing (Python 3.12+) . Install the compatibility packages: . sudo apt-get install python3-distutils python3 -m pip install setuptools pnpm run install:safe . Native Module Build Errors (gyp ERR!) . | Native dependencies such as bcrypt, cpu-features, and ssh2 are optional. | Use pnpm run install:safe to fall back to JavaScript implementations. | Confirm you are running Node.js 22+ and pnpm 7+. | . ",
    "url": "/common-issues/troubleshooting.html#installation-failures",
    
    "relUrl": "/common-issues/troubleshooting.html#installation-failures"
  },"188": {
    "doc": "Troubleshooting",
    "title": "Missing JSON Data Files",
    "content": "Ensure the asset copy script runs during the build: . pnpm build . The copy-assets step includes src/data/* in the final dist/ directory. ",
    "url": "/common-issues/troubleshooting.html#missing-json-data-files",
    
    "relUrl": "/common-issues/troubleshooting.html#missing-json-data-files"
  },"189": {
    "doc": "Troubleshooting",
    "title": "Verification Checklist",
    "content": "pnpm build node -e \"const pkg = require('./package.json'); console.log('✅', pkg.name, pkg.version);\" . ",
    "url": "/common-issues/troubleshooting.html#verification-checklist",
    
    "relUrl": "/common-issues/troubleshooting.html#verification-checklist"
  },"190": {
    "doc": "Troubleshooting",
    "title": "Manual Workarounds",
    "content": "pnpm install --ignore-scripts pnpm build export PYTHON=python3.11 pnpm install docker run -v $(pwd):/app -w /app node:22 \\ sh -c \"corepack enable &amp;&amp; pnpm install &amp;&amp; pnpm build\" . ",
    "url": "/common-issues/troubleshooting.html#manual-workarounds",
    
    "relUrl": "/common-issues/troubleshooting.html#manual-workarounds"
  },"191": {
    "doc": "Troubleshooting",
    "title": "ERR_MODULE_NOT_FOUND When Starting the Server",
    "content": "If Node reports Error [ERR_MODULE_NOT_FOUND]: Cannot find module .../dist/index.js, confirm the project is marked as an ES module. The root package.json must contain \"type\": \"module\"; some scaffolding tools overwrite this flag. pnpm pkg set type=module pnpm install . Restart the server after restoring the module type so ESM imports resolve correctly. ",
    "url": "/common-issues/troubleshooting.html#err_module_not_found-when-starting-the-server",
    
    "relUrl": "/common-issues/troubleshooting.html#err_module_not_found-when-starting-the-server"
  },"192": {
    "doc": "Troubleshooting",
    "title": "Getting Help",
    "content": ". | Confirm Node.js and Python versions with node --version and python3 --version. | Capture the failing command output and try to reduce it to a small reproduction. | Open an issue with system details, the reproduction, and logs at GitHub Issues so we can investigate quickly. | . ",
    "url": "/common-issues/troubleshooting.html#getting-help",
    
    "relUrl": "/common-issues/troubleshooting.html#getting-help"
  },"193": {
    "doc": "TypeScript Usage",
    "title": "TypeScript Usage Guide",
    "content": "Recommended TypeScript patterns for using simple-rpc-ai-backend in your projects. ",
    "url": "/tips-and-tricks/typescript-usage.html#typescript-usage-guide",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#typescript-usage-guide"
  },"194": {
    "doc": "TypeScript Usage",
    "title": "Installation",
    "content": "pnpm add simple-rpc-ai-backend . The package ships with full type definitions—no extra typings required. ",
    "url": "/tips-and-tricks/typescript-usage.html#installation",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#installation"
  },"195": {
    "doc": "TypeScript Usage",
    "title": "Type-Safe Server Configuration",
    "content": "Using satisfies . import { createRpcAiServer, type RpcAiServerConfig } from 'simple-rpc-ai-backend'; const config = { port: 8000, serverProviders: ['anthropic', 'openai'], protocols: { jsonRpc: true, tRpc: true }, mcp: { enabled: true, transports: { http: true, stdio: false } } } satisfies RpcAiServerConfig; const server = createRpcAiServer(config); . Benefits: . | ✅ Type checking for configuration keys | ✅ Literal types preserved for better IntelliSense | ✅ Less casting compared to as | . Using defineRpcAiServerConfig . import { createRpcAiServer, defineRpcAiServerConfig } from 'simple-rpc-ai-backend'; const config = defineRpcAiServerConfig({ port: 8000, systemPrompts: { default: 'You are a helpful assistant' } }); const server = createRpcAiServer(config); . ",
    "url": "/tips-and-tricks/typescript-usage.html#type-safe-server-configuration",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#type-safe-server-configuration"
  },"196": {
    "doc": "TypeScript Usage",
    "title": "Type-Safe tRPC Client",
    "content": "import { createTypedAIClient } from 'simple-rpc-ai-backend'; import { httpBatchLink } from '@trpc/client'; import type { AppRouter } from 'simple-rpc-ai-backend'; const client = createTypedAIClient({ links: [ httpBatchLink({ url: 'http://localhost:8000/trpc', headers: () =&gt; ({ Authorization: 'Bearer token' }) }) ] }); const result = await client.ai.generateText.mutate({ content: 'Explain context bridges', provider: 'anthropic' }); . ",
    "url": "/tips-and-tricks/typescript-usage.html#type-safe-trpc-client",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#type-safe-trpc-client"
  },"197": {
    "doc": "TypeScript Usage",
    "title": "Narrowing Procedure Output",
    "content": "const res = await client.system.health.query(); if (res.status === 'healthy') { // TypeScript understands res since the schema enforces it } . ",
    "url": "/tips-and-tricks/typescript-usage.html#narrowing-procedure-output",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#narrowing-procedure-output"
  },"198": {
    "doc": "TypeScript Usage",
    "title": "tRPC Router Augmentation",
    "content": "import { router, publicProcedure } from 'simple-rpc-ai-backend'; import { z } from 'zod'; export const mathRouter = router({ add: publicProcedure .input(z.object({ a: z.number(), b: z.number() })) .mutation(({ input }) =&gt; ({ result: input.a + input.b })) }); . Then merge it into your server via customRouters. ",
    "url": "/tips-and-tricks/typescript-usage.html#trpc-router-augmentation",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#trpc-router-augmentation"
  },"199": {
    "doc": "TypeScript Usage",
    "title": "Utility Types",
    "content": ". | AppRouter – full router type, useful for caller factories | RpcAiServerConfig – configuration schema | McpToolMeta – metadata for MCP tool annotations | . Import them directly from the package when extending your own code. ",
    "url": "/tips-and-tricks/typescript-usage.html#utility-types",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html#utility-types"
  },"200": {
    "doc": "TypeScript Usage",
    "title": "TypeScript Usage",
    "content": " ",
    "url": "/tips-and-tricks/typescript-usage.html",
    
    "relUrl": "/tips-and-tricks/typescript-usage.html"
  },"201": {
    "doc": "Workspaces",
    "title": "Workspaces",
    "content": "Understand the distinction between server-managed workspaces and client-supplied MCP roots to configure access safely. ",
    "url": "/common-configurations/workspaces.html",
    
    "relUrl": "/common-configurations/workspaces.html"
  },"202": {
    "doc": "Workspaces",
    "title": "Concepts at a Glance",
    "content": "| Aspect | Server Workspaces | MCP Roots | . | Owner | Server administrator | Client / end user | . | Configuration | Server config (serverWorkspaces) | MCP capability negotiation | . | Purpose | Templates, shared resources, sandbox directories | User project folders | . | Access Control | Enforced by server policies | Granted by the client | . | MCP Role | Not part of roots/list | Exposed via roots/list | . ",
    "url": "/common-configurations/workspaces.html#concepts-at-a-glance",
    
    "relUrl": "/common-configurations/workspaces.html#concepts-at-a-glance"
  },"203": {
    "doc": "Workspaces",
    "title": "Architecture Overview",
    "content": "flowchart TD subgraph Client clientRoots[Client-managed directories&lt;br/&gt;e.g. ~/projects,&lt;br/&gt;/mnt/shared/projectX] end subgraph Server rpcServer((tRPC / MCP Server)) serverWorkspaces[Server Workspaces&lt;br/&gt;Configured via serverWorkspaces] end rpcServer -- \"roots/list\" --&gt; clientRoots clientRoots -- \"registerClientWorkspace\" --&gt; rpcServer rpcServer -- \"listFiles / readFile / writeFile\" --&gt; serverWorkspaces . Arrow directions reflect who makes each request: the server calls roots/list on the client, whereas the client invokes registerClientWorkspace on the server. ",
    "url": "/common-configurations/workspaces.html#architecture-overview",
    
    "relUrl": "/common-configurations/workspaces.html#architecture-overview"
  },"204": {
    "doc": "Workspaces",
    "title": "Server Workspaces",
    "content": "Server workspaces are directories registered by the server to expose curated content. They are available via tRPC and MCP tools like getServerWorkspaces, listFiles, and readFile. Use Cases . | Templates &amp; examples – expose curated sample projects or onboarding kits. | Reference data – serve static catalogues, project manifests, or SQL migrations. | Shared resources – provide compliance documents or knowledge-base exports. | Scratch space – give users a temporary area for uploads with quotas. | . Example Configuration . const server = createRpcAiServer({ serverWorkspaces: { enableAPI: true, templates: { path: '/opt/templates', name: 'Server Templates', description: 'Pre-built project templates', readOnly: true, allowedExtensions: ['.js', '.ts', '.json', '.md'] }, sandbox: { path: '/tmp/workspace', name: 'Sandbox', readOnly: false, allowedPaths: ['**/*.txt', '**/*.json'], blockedPaths: ['**/node_modules', '**/.git'], maxFileSize: 5 * 1024 * 1024, followSymlinks: false } } }); . Security Checklist . | Default to readOnly: true unless write access is essential. | Restrict file types with allowedExtensions and blockedExtensions. | Limit path traversal with allowedPaths and blockedPaths. | Set followSymlinks: false to avoid symlink escapes. | Impose maxFileSize limits for uploads or writes. | Set up monitoring to log high-risk operations (delete/write). | . Available Tools . When serverWorkspaces is configured, these tRPC/MCP tools become available: . | getServerWorkspaces | listFiles, readFile, writeFile, pathExists | addServerWorkspace, removeServerWorkspace | . ",
    "url": "/common-configurations/workspaces.html#server-workspaces",
    
    "relUrl": "/common-configurations/workspaces.html#server-workspaces"
  },"205": {
    "doc": "Workspaces",
    "title": "MCP Roots",
    "content": "MCP roots represent client-controlled folders. Clients register them with the server and expose them via the MCP roots/list exchange. await client.registerClientWorkspace({ id: 'project', uri: 'file:///home/user/projects/sample', name: 'Sample Project' }); const roots = await server.mcpCall('roots/list'); // Returns client-advertised directories . Best Practices . | Prompt users for explicit consent before sharing directories. | Validate incoming file:// URIs on the client side. | Monitor access patterns and audit when sensitive files are involved. | Ensure MCP clients advertise the roots capability ({\"roots\": {\"listChanged\": true}}). | Send notifications/roots/list_changed when the client’s workspace list changes. | Handle missing roots gracefully—clients may revoke them at any time. | . ",
    "url": "/common-configurations/workspaces.html#mcp-roots",
    
    "relUrl": "/common-configurations/workspaces.html#mcp-roots"
  },"206": {
    "doc": "Workspaces",
    "title": "Configuration Scenarios",
    "content": "const server = createRpcAiServer({ serverWorkspaces: { templates: { path: '/opt/templates', readOnly: true, allowedExtensions: ['.md', '.json'] }, sandbox: { path: '/tmp/workspace', readOnly: false, maxFileSize: 10 * 1024 * 1024, allowedPaths: ['**/*.json', '**/*.md'], blockedPaths: ['**/node_modules/**', '**/.git/**'] } }, mcp: { enabled: true, auth: { requireAuthForToolsCall: true } } }); . On the MCP client side: . { \"method\": \"initialize\", \"params\": { \"capabilities\": { \"roots\": { \"listChanged\": true } } } } . ",
    "url": "/common-configurations/workspaces.html#configuration-scenarios",
    
    "relUrl": "/common-configurations/workspaces.html#configuration-scenarios"
  },"207": {
    "doc": "Workspaces",
    "title": "Security Considerations",
    "content": ". | Principle of least privilege – expose the smallest directory possible. | Readonly first – flip readOnly to false only when you truly need write access. | File type allowlists – set allowedExtensions rather than relying on defaults. | Symlink protection – keep followSymlinks: false unless you trust the tree. | Audit trails – enable structured logging for file operations and review regularly. | . ",
    "url": "/common-configurations/workspaces.html#security-considerations",
    
    "relUrl": "/common-configurations/workspaces.html#security-considerations"
  },"208": {
    "doc": "Workspaces",
    "title": "Troubleshooting",
    "content": "| Symptom | Likely Cause | Resolution | . | No workspaces available | serverWorkspaces missing | Add at least one workspace configuration. | . | writeFile returns ACCESS_DENIED | Workspace is read-only or path blocked | Toggle readOnly or adjust path rules. | . | MCP client cannot see roots | Client did not advertise roots capability | Ensure initialize payload includes roots. | . | Unexpected files exposed | allowedPaths too broad | Tighten glob patterns or add blockedPaths. | . Enable debug logging to inspect decisions: . const server = createRpcAiServer({ monitoring: { logging: { level: 'debug' } } }); . ",
    "url": "/common-configurations/workspaces.html#troubleshooting",
    
    "relUrl": "/common-configurations/workspaces.html#troubleshooting"
  },"209": {
    "doc": "Workspaces",
    "title": "Best Practices Recap",
    "content": ". | Keep server workspaces curated and audited. | Require explicit user consent before registering MCP roots. | Combine server and client workspaces for a complete experience. | Review configurations periodically—especially before enabling write access. | . ",
    "url": "/common-configurations/workspaces.html#best-practices-recap",
    
    "relUrl": "/common-configurations/workspaces.html#best-practices-recap"
  }
}
