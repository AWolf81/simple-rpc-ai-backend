name: Docs Preview

on:
  pull_request:
    paths:
      - 'docs/**'
      - '!docs/_site/**'
      - '!docs/.jekyll-cache/**'
      - '!docs/vendor/**'
      - '!docs/.bundle/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  pull-requests: write

concurrency:
  group: docs-preview-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    name: Build and deploy Jekyll preview
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true
          working-directory: docs

      - name: Build site
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: github.event_name == 'pull_request'

      - name: Comment PR with preview link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/`;

            const comment = `## ðŸ“– Docs Preview Ready!

            Your documentation preview has been deployed to GitHub Pages:

            ðŸ”— **[View Docs Preview](${previewUrl})**

            The preview will be updated automatically when you push new changes to this PR.`;

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ðŸ“– Docs Preview Ready!')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
