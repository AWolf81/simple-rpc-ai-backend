{
  "openrpc": "1.2.6",
  "info": {
    "title": "Simple RPC AI Backend",
    "description": "Platform-agnostic JSON-RPC server for AI integration in VS Code extensions, web apps, and CLI tools. Provides secure system prompt protection and corporate proxy bypass.",
    "version": "0.1.0",
    "contact": {
      "name": "Simple RPC AI Backend",
      "url": "https://github.com/AWolf81/simple-rpc-ai-backend"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "name": "Local Development Server",
      "url": "http://localhost:8000/rpc",
      "description": "Default local development server"
    }
  ],
  "methods": [
    {
      "name": "health",
      "description": "Check server health and availability status",
      "params": [],
      "result": {
        "name": "healthResult",
        "description": "Server health status information",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": ["healthy", "degraded", "unhealthy"],
              "description": "Overall server health status"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "ISO timestamp of health check"
            },
            "uptime": {
              "type": "number",
              "description": "Server uptime in seconds"
            }
          },
          "required": ["status", "timestamp"]
        }
      },
      "examples": [
        {
          "name": "Basic health check",
          "result": {
            "status": "healthy",
            "timestamp": "2024-01-15T10:30:00Z",
            "uptime": 3600
          }
        }
      ]
    },
    {
      "name": "executeAIRequest",
      "description": "Execute AI analysis request with system prompt protection. The system prompt is resolved server-side to protect proprietary prompts.",
      "params": [
        {
          "name": "content",
          "description": "Code or text content to analyze",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100000
          }
        },
        {
          "name": "systemPrompt",
          "description": "System prompt identifier (e.g., 'security_review', 'code_quality', 'architecture_review')",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["security_review", "code_quality", "architecture_review"]
          }
        },
        {
          "name": "aiOptions",
          "description": "Optional AI provider configuration",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "enum": ["anthropic", "openai", "google"],
                "description": "AI provider to use"
              },
              "model": {
                "type": "string",
                "description": "Specific model name"
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Creativity setting (0-1)"
              },
              "maxTokens": {
                "type": "integer",
                "minimum": 1,
                "maximum": 8192,
                "description": "Maximum response tokens"
              }
            }
          }
        },
        {
          "name": "apiKey",
          "description": "Optional API key for BYOK (Bring Your Own Key) usage",
          "required": false,
          "schema": {
            "type": "string",
            "minLength": 1,
            "description": "User's API key for the AI provider"
          }
        }
      ],
      "result": {
        "name": "aiAnalysisResult",
        "description": "AI analysis response",
        "schema": {
          "type": "object",
          "properties": {
            "analysis": {
              "type": "string",
              "description": "AI analysis response text"
            },
            "provider": {
              "type": "string",
              "description": "AI provider used"
            },
            "model": {
              "type": "string",
              "description": "Specific model used"
            },
            "tokensUsed": {
              "type": "integer",
              "description": "Number of tokens consumed"
            },
            "processingTime": {
              "type": "number",
              "description": "Processing time in milliseconds"
            }
          },
          "required": ["analysis"]
        }
      },
      "examples": [
        {
          "name": "Security review example",
          "params": [
            {
              "name": "content",
              "value": "function add(a, b) { return a + b; }"
            },
            {
              "name": "systemPrompt", 
              "value": "security_review"
            }
          ],
          "result": {
            "analysis": "The function appears secure with no obvious vulnerabilities. It uses simple arithmetic operations without external dependencies or user input validation concerns.",
            "provider": "anthropic",
            "model": "claude-3-5-sonnet-20241022",
            "tokensUsed": 45,
            "processingTime": 1250
          }
        },
        {
          "name": "BYOK example with API key",
          "params": [
            {
              "name": "content",
              "value": "const password = '123456';"
            },
            {
              "name": "systemPrompt",
              "value": "security_review"
            },
            {
              "name": "apiKey",
              "value": "sk-ant-api03-your-api-key-here"
            }
          ],
          "result": {
            "analysis": "Security vulnerability detected: hardcoded password should be moved to environment variables or secure configuration.",
            "provider": "anthropic",
            "model": "claude-3-5-sonnet-20241022",
            "tokensUsed": 52,
            "processingTime": 1380
          }
        }
      ]
    },
    {
      "name": "initializeSession",
      "description": "Create device session for progressive authentication",
      "params": [
        {
          "name": "deviceId",
          "description": "Unique device identifier",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "name": "deviceName",
          "description": "Human-readable device name",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ],
      "result": {
        "name": "sessionResult",
        "description": "Session initialization result",
        "schema": {
          "type": "object",
          "properties": {
            "sessionId": {
              "type": "string",
              "description": "Session identifier"
            },
            "authLevel": {
              "type": "string",
              "enum": ["anonymous", "oauth", "pro"],
              "description": "Current authentication level"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Available features for this auth level"
            }
          },
          "required": ["sessionId", "authLevel"]
        }
      }
    },
    {
      "name": "listCustomFunctions",
      "description": "List all available custom AI functions",
      "params": [],
      "result": {
        "name": "functionsResult",
        "description": "Available custom functions",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Function name"
              },
              "description": {
                "type": "string",
                "description": "Function description"
              },
              "category": {
                "type": "string",
                "description": "Function category"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "required": {
                      "type": "boolean"
                    },
                    "default": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": ["name", "description"]
          }
        }
      },
      "examples": [
        {
          "name": "List available functions",
          "result": [
            {
              "name": "analyzeCode",
              "description": "Analyze code for issues and improvements",
              "category": "code-analysis"
            },
            {
              "name": "generateTests", 
              "description": "Generate test cases for code",
              "category": "testing"
            }
          ]
        }
      ]
    },
    {
      "name": "analyzeCode",
      "description": "Built-in function to analyze code for issues and improvements",
      "params": [
        {
          "name": "content",
          "description": "Code content to analyze",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "name": "language",
          "description": "Programming language",
          "required": false,
          "schema": {
            "type": "string",
            "enum": ["javascript", "typescript", "python", "java", "go", "rust", "php", "auto"]
          }
        }
      ],
      "result": {
        "name": "codeAnalysisResult",
        "description": "Code analysis response",
        "schema": {
          "type": "object",
          "properties": {
            "analysis": {
              "type": "string",
              "description": "Detailed code analysis"
            },
            "issues": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "severity": {
                    "type": "string",
                    "enum": ["low", "medium", "high", "critical"]
                  },
                  "line": {
                    "type": "integer"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            },
            "suggestions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["analysis"]
        }
      }
    },
    {
      "name": "generateTests",
      "description": "Built-in function to generate test cases for code",
      "params": [
        {
          "name": "content",
          "description": "Code content to generate tests for",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "name": "framework",
          "description": "Testing framework preference",
          "required": false,
          "schema": {
            "type": "string",
            "enum": ["vitest", "jest", "mocha", "pytest", "junit", "go-test", "auto"]
          }
        }
      ],
      "result": {
        "name": "testGenerationResult",
        "description": "Generated test code",
        "schema": {
          "type": "object",
          "properties": {
            "testCode": {
              "type": "string",
              "description": "Generated test code"
            },
            "framework": {
              "type": "string",
              "description": "Testing framework used"
            },
            "testCount": {
              "type": "integer",
              "description": "Number of test cases generated"
            }
          },
          "required": ["testCode"]
        }
      }
    },
    {
      "name": "securityReview",
      "description": "Built-in function to review code for security vulnerabilities",
      "params": [
        {
          "name": "content",
          "description": "Code content to review for security issues",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ],
      "result": {
        "name": "securityReviewResult",
        "description": "Security analysis response",
        "schema": {
          "type": "object",
          "properties": {
            "securityAnalysis": {
              "type": "string",
              "description": "Detailed security analysis"
            },
            "vulnerabilities": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "severity": {
                    "type": "string",
                    "enum": ["low", "medium", "high", "critical"]
                  },
                  "category": {
                    "type": "string",
                    "enum": ["injection", "authentication", "authorization", "cryptography", "input-validation", "business-logic"]
                  },
                  "line": {
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "remediation": {
                    "type": "string"
                  }
                }
              }
            },
            "riskLevel": {
              "type": "string",
              "enum": ["low", "medium", "high", "critical"]
            }
          },
          "required": ["securityAnalysis"]
        }
      }
    },
    {
      "name": "listProviders",
      "description": "List available AI providers",
      "params": [],
      "result": {
        "name": "providersResult",
        "description": "Available AI providers and their models",
        "schema": {
          "type": "object",
          "properties": {
            "providers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "models": { "type": "array", "items": { "type": "string" } },
                  "priority": { "type": "number" }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "storeUserKey",
      "description": "Store encrypted API key for BYOK usage",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        },
        {
          "name": "provider",
          "description": "AI provider name",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["anthropic", "openai", "google"]
          }
        },
        {
          "name": "apiKey",
          "description": "API key to store (encrypted server-side)",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ],
      "result": {
        "name": "keyOperationResult",
        "description": "Key storage result",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Whether key was stored successfully"
            },
            "secretId": {
              "type": "string",
              "description": "Identifier for the stored key"
            },
            "message": {
              "type": "string",
              "description": "Success message"
            },
            "error": {
              "type": "string",
              "description": "Error message if failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "getUserKey",
      "description": "Get user API key status (without exposing the key)",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        },
        {
          "name": "provider",
          "description": "AI provider name",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["anthropic", "openai", "google"]
          }
        }
      ],
      "result": {
        "name": "keyStatusResult",
        "description": "Key status result",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string",
              "description": "Status message or encrypted key preview"
            },
            "error": {
              "type": "string",
              "description": "Error message if failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "getUserProviders",
      "description": "Get all configured providers for a user",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        }
      ],
      "result": {
        "name": "userProvidersResult",
        "description": "User's configured providers",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "providers": {
              "type": "array",
              "items": { "type": "string" },
              "description": "List of provider names"
            },
            "error": {
              "type": "string",
              "description": "Error message if failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "validateUserKey",
      "description": "Validate user's stored API key",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        },
        {
          "name": "provider",
          "description": "AI provider name",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["anthropic", "openai", "google"]
          }
        }
      ],
      "result": {
        "name": "keyValidationResult",
        "description": "Key validation result",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "valid": {
              "type": "boolean",
              "description": "Whether the API key is valid"
            },
            "error": {
              "type": "string",
              "description": "Error message if validation failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "rotateUserKey",
      "description": "Update/rotate user's API key",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        },
        {
          "name": "provider",
          "description": "AI provider name",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["anthropic", "openai", "google"]
          }
        },
        {
          "name": "newApiKey",
          "description": "New API key to store",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ],
      "result": {
        "name": "keyOperationResult",
        "description": "Key rotation result",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "secretId": {
              "type": "string",
              "description": "New key identifier"
            },
            "message": {
              "type": "string",
              "description": "Success message"
            },
            "error": {
              "type": "string",
              "description": "Error message if failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "deleteUserKey",
      "description": "Delete user's stored API key",
      "params": [
        {
          "name": "email",
          "description": "User email address",
          "required": true,
          "schema": {
            "type": "string",
            "format": "email"
          }
        },
        {
          "name": "provider",
          "description": "AI provider name",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["anthropic", "openai", "google"]
          }
        }
      ],
      "result": {
        "name": "keyOperationResult",
        "description": "Key deletion result",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "deleted": {
              "type": "boolean",
              "description": "Whether the key was deleted"
            },
            "message": {
              "type": "string",
              "description": "Success message"
            },
            "error": {
              "type": "string",
              "description": "Error message if failed"
            }
          },
          "required": ["success"]
        }
      }
    },
    {
      "name": "rpc.discover",
      "description": "OpenRPC service discovery method - returns this OpenRPC schema",
      "params": [],
      "result": {
        "name": "openrpcDocument",
        "description": "The OpenRPC schema document for this service",
        "schema": {
          "$ref": "https://raw.githubusercontent.com/open-rpc/meta-schema/master/schema.json",
          "description": "Complete OpenRPC specification document"
        }
      },
      "examples": [
        {
          "name": "Service discovery",
          "result": {
            "openrpc": "1.2.6",
            "info": {
              "title": "Simple RPC AI Backend",
              "version": "0.1.0"
            }
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "JSON-RPC error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "data": {
            "description": "Additional error data"
          }
        },
        "required": ["code", "message"]
      },
      "AIProvider": {
        "type": "string",
        "enum": ["anthropic", "openai", "google"],
        "description": "Supported AI providers"
      },
      "AuthLevel": {
        "type": "string",
        "enum": ["anonymous", "oauth", "pro"],
        "description": "Authentication levels"
      }
    }
  }
}